using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Molten
{
    public delegate void ContentLoadCallbackHandler<T>(T asset, bool isReload);

    public class ContentLoadHandle : ContentHandle
    {
        bool _canHotReload;
        ContentWatcher _watcher;
        ContentLoadCallbackHandler<object> _callback;

        internal ContentLoadHandle(
            ContentManager manager,
            string path,
            int partCount,
            Type contentType,
            IContentProcessor processor,
            ContentParameters parameters,
            ContentLoadCallbackHandler<object> callback,
            bool canHotReload) :
            base(manager, path, contentType, processor, parameters, ContentHandleType.Load)
        {
            _callback = callback;
            _canHotReload = canHotReload;
            if (partCount > 1)
                Parts = new ContentLoadHandle[partCount];
        }

        /// <summary>
        /// Check if the asset source file was altered by doing an integrity check.
        /// </summary>
        /// <param name="hashAlgorithm">A <see cref="HashAlgorithm"/> to generate and compare a checksum hash.</param>
        /// <param name="updateChecksum">If true, the current <see cref="Checksum"/> will be updated.</param>
        /// <returns>True if the file has not been altered since it's last (re)load</returns>
        public bool IntegrityCheck(HashAlgorithm hashAlgorithm, bool updateChecksum)
        {
            // Perform a checksum comparison
            byte[] hashBytes = null;
            using (FileStream stream = Info.Open(FileMode.Open, FileAccess.Read, FileShare.Read))
                hashBytes = hashAlgorithm.ComputeHash(stream);

            string checksum = BitConverter.ToString(hashBytes);
            if (checksum != Checksum)
            {
                if(updateChecksum)
                    Checksum = checksum;

                return false;
            }

            return true;
        }

        protected override bool OnProcess()
        {
            bool reload = Asset != null;

            if (reload)
            {
                Type assetType = Asset.GetType();
                object[] att = assetType.GetCustomAttributes(typeof(ContentReloadAttribute), true);
                if (att.Length > 0)
                {
                    // Can we reuse the existing asset, or reinstantiate it?
                    if (att[0] is ContentReloadAttribute attReload && attReload.Reinstantiate)
                    {
                        // Reinstantiating, so dispose of existing asset if possible.
                        if (Asset is IDisposable disposable)
                            disposable.Dispose();
                    }
                }
            }

            return Processor.Read(this, Asset, out Asset);
        }

        private void UpdateWatcher()
        {
            // Delete the watcher if we have one to prevent reloads.
            if (!_canHotReload)
            {
                if (_watcher != null)
                    Manager.StopWatching(_watcher, this);
            }
            else
            {
                if (_watcher == null)
                    _watcher = Manager.StartWatching(this);
            }
        }

        protected override ContentHandleStatus OnComplete()
        {
            _callback?.Invoke(Asset, IsLoaded);
            IsLoaded = true;
            UpdateWatcher();

            return ContentHandleStatus.Completed;
        }

        public bool HasAsset()
        {
            return Asset != null;
        }

        /// <summary>
        /// Gets whether or not the current <see cref="ContentLoadHandle"/> has completed it's first-time load.
        /// </summary>
        public bool IsLoaded { get; protected set; }

        /// <summary>
        /// Gets or sets whether the asset is allowed to hot-reload when changes occur to it's file.
        /// </summary>
        public bool CanHotReload
        {
            get => _canHotReload;
            set
            {
                if (_canHotReload != value)
                {
                    _canHotReload = value;
                    UpdateWatcher();
                }
            }
        }

        /// <summary>
        /// Gets or sets the last-write timestamp of the asset. This is especially useful for tracking if/when changes happened on hot-reloaded assets.
        /// </summary>
        internal DateTime LastWriteTime { get; set; }

        /// <summary>
        /// Gets the checksum string generated by the latest <see cref="IntegrityCheck(HashAlgorithm, bool)"/> call, where the checksum was allowed to update.
        /// </summary>
        public string Checksum { get; private set; }

        /// <summary>
        /// Gets any part handles associated with the current <see cref="ContentLoadHandle"/>.
        /// </summary>
        public ContentLoadHandle[] Parts { get; }

        /// <summary>
        /// Gets whether or not the current <see cref="ContentLoadHandle"/> represents a part of another <see cref="ContentLoadHandle"/> asset.
        /// </summary>
        public bool IsPart { get; internal set; }
    }
}
