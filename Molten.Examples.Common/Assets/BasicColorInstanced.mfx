<material>
	<name>position-color-instanced</name>
	<description>A simple shader which renders meshes with position and color data</description>
	<pass>
		<name>main</name>
		<iterations>1</iterations>
		<vertex>VS</vertex>
    <fragment>PS</fragment>
	</pass>
</material>

struct VS_IN
{
	float4 pos : POSITION;
	float4 col : COLOR;
    uint iid : SV_InstanceID;
};

struct INSTANCE_IN
{
    float4 wvpX : ROWX;
    float4 wvpY : ROWY;
    float4 wvpZ : ROWZ;
    float4 wvpW : ROWW;
};

struct PS_IN
{
	float4 pos : SV_POSITION;
	float4 col : COLOR;
};

cbuffer Common : register(b0)
{
  float4x4 view   : packoffset(c0);
  float4x4 projection : packoffset(c4);
  float4x4 viewProjection : packoffset(c8);
  float4x4 invViewProjection: packoffset(c12);
}

PS_IN VS( VS_IN input, INSTANCE_IN instance )
{
	PS_IN output = (PS_IN)0;	
    float4x4 wvp = float4x4(instance.wvpX, instance.wvpY, instance.wvpZ, instance.wvpW);
	output.pos = mul(input.pos, wvp);
	output.col = input.col;	
	return output;
}

float4 PS( PS_IN input ) : SV_Target
{
	return input.col;
}