<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
TypeGenerator gen = new TypeGenerator(this.GenerationEnvironment, this.Host, "def_vectors.json", "fp");

gen.Generate((d) => d.DT.IsFPType, (d, def) =>
{
    int size = d.GetDimension(0);
#>
using System;

namespace Molten<#=d.SubNamespace#>;

///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=size#> components.</summary>
public partial struct <#=d.Name#>
{
    /// <summary>
    /// Gets a value indicting whether this instance is normalized.
    /// </summary>
    public bool IsNormalized
    {
        get => MathHelper.IsOne(<#for(int p = 0; p < size; p++){#>(<#=d.FieldNames[p]#> * <#=d.FieldNames[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
    }

    /// <summary>
    /// Orthonormalizes a list of vectors.
    /// </summary>
    /// <param name="destination">The list of orthonormalized vectors.</param>
    /// <param name="source">The list of vectors to orthonormalize.</param>
    /// <remarks>
    /// <para>Orthonormalization is the process of making all vectors orthogonal to each
    /// other and making all vectors of unit length. This means that any given vector will
    /// be orthogonal to any other given vector in the list.</para>
    /// <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
    /// tend to be numerically unstable. The numeric stability decreases according to the vectors
    /// position in the list so that the first vector is the most stable and the last vector is the
    /// least stable.</para>
    /// </remarks>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
    /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
    public static void Orthonormalize(<#=d.Name#>[] destination, params <#=d.Name#>[] source)
    {
        //Uses the modified Gram-Schmidt process.
        //Because we are making unit vectors, we can optimize the math for orthogonalization
        //and simplify the projection operation to remove the division.
        //q1 = m1 / |m1|
        //q2 = (m2 - (q1 ⋅ m2) * q1) / |m2 - (q1 ⋅ m2) * q1|
        //q3 = (m3 - (q1 ⋅ m3) * q1 - (q2 ⋅ m3) * q2) / |m3 - (q1 ⋅ m3) * q1 - (q2 ⋅ m3) * q2|
        //q4 = (m4 - (q1 ⋅ m4) * q1 - (q2 ⋅ m4) * q2 - (q3 ⋅ m4) * q3) / |m4 - (q1 ⋅ m4) * q1 - (q2 ⋅ m4) * q2 - (q3 ⋅ m4) * q3|
        //q5 = ...

        if (source == null)
            throw new ArgumentNullException("source");
        if (destination == null)
            throw new ArgumentNullException("destination");
        if (destination.Length < source.Length)
            throw new ArgumentOutOfRangeException("destination", "The destination array must be of same length or larger length than the source array.");

        for (int i = 0; i < source.Length; ++i)
        {
            <#=d.Name#> newvector = source[i];

            for (int r = 0; r < i; ++r)
                newvector -= Dot(destination[r], newvector) * destination[r];

            newvector.Normalize();
            destination[i] = newvector;
        }
    }

    /// <summary>
    /// Tests whether one 3D vector is near another 3D vector.
    /// </summary>
    /// <param name="left">The left vector.</param>
    /// <param name="right">The right vector.</param>
    /// <param name="epsilon">The epsilon.</param>
    /// <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
    public static bool NearEqual(<#=d.Name#> left, <#=d.Name#> right, <#=d.Name#> epsilon)
    {
        return NearEqual(ref left, ref right, ref epsilon);
    }

    /// <summary>
    /// Tests whether one 3D vector is near another 3D vector.
    /// </summary>
    /// <param name="left">The left vector.</param>
    /// <param name="right">The right vector.</param>
    /// <param name="epsilon">The epsilon.</param>
    /// <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
    public static bool NearEqual(ref <#=d.Name#> left, ref <#=d.Name#> right, ref <#=d.Name#> epsilon)
    {
        return <#for(int p = 0; p < size; p++){#>MathHelper.WithinEpsilon(left.<#=d.FieldNames[p]#>, right.<#=d.FieldNames[p]#>, epsilon.<#=d.FieldNames[p]#>)<#=(p < (size-1) ? " && " : "")#><#}#>;
    }

    /// <summary>
    /// Converts the <#=gen.See()#> into a unit vector.
    /// </summary>
    /// <param name="value">The <#=gen.See()#> to normalize.</param>
    /// <param name="allowZero">If true, zero values are allowed.</param>
    /// <returns>The normalized <#=gen.See()#>.</returns>
    public static <#=d.Name#> Normalize(<#=d.Name#> value, bool allowZero = false)
    {
        value.Normalize(allowZero);
        return value;
    }

    /// <summary>
    /// Returns a normalized unit vector of the original vector.
    /// </summary>
    /// <param name="allowZero">If true, zero values are allowed.</param>
    public <#=d.Name#> GetNormalized(bool allowZero = false)
    {
        <#=d.FP#> length = Length();
        if (!MathHelper.IsZero(length))
        {
            <#=d.FP#> inverse = <#=d.FP.One#> / length;
            return new <#=d.Name#>()
            {
<#gen.IterateFields((i, field) => $"\t\t{d.FieldNames[i]} = this.{d.FieldNames[i]} * inverse{(i < size-1 ? "," : "")}", 0);#>
            };
        }
        else
        {
            return new <#=d.Name#>()
            {
<#gen.IterateFields((i, field) => $"\t\t{d.FieldNames[i]} = {(i == 1 ? "allowZero ? 1 : 0" : "0")}{(i < size-1 ? "," : "")}", 0);#>
            };
        }
    }

    /// <summary>
    /// Converts the vector into a unit vector.
    /// </summary>
    /// <param name="allowZero">If true, zero values are allowed.</param>
    public void Normalize(bool allowZero = false)
    {
        <#=d.DT#> length = Length();
        if (!MathHelper.IsZero(length))
        {
            <#=d.FP#> inverse = <#=d.FP.One#> / length;
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.DT.FPCast}({d.FieldNames[i]} * inverse);", 0, 4);#>
        }
        else
        {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {(i == 1 ? "allowZero ? 1 : 0" : "0")};", 0, 4);#>
        }
    }

	/// <summary>
    /// Saturates this instance in the range [0,1]
    /// </summary>
    public void Saturate()
    {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.FieldNames[i]} < {d.DT.Zero} ? {d.DT.Zero} : {d.FieldNames[i]} > {d.DT.One} ? {d.DT.One} : {d.FieldNames[i]};", 0);#>
    }

    /// <summary>Checks to see if any value (x, y, z, w) are within 0.0001 of 0.
    /// If so this method truncates that value to zero.</summary>
    /// <param name="power">The power.</param>
    /// <param name="vec">The vector.</param>
    public static <#=d.Name#> Pow(<#=d.Name#> vec, <#=d.DT#> power)
    {
        return new <#=d.Name#>()
        {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.DT.Math}.Pow(vec.{d.FieldNames[i]}, power){(i < size-1 ? "," : "")}", 0, 4);#>
        };
    }

	/// <summary>Rounds all components down to the nearest unit.</summary>
    public void Floor()
    {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.DT.Math}.Floor({d.FieldNames[i]});", 0);#>
    }

    /// <summary>Rounds all components up to the nearest unit.</summary>
    public void Ceiling()
    {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.DT.Math}.Ceiling({d.FieldNames[i]});", 0);#>
    }

    /// <summary>Removes the sign from each component of the current <see cref="<#=d.Name#>"/>.</summary>
    public void Abs()
    {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.DT.Math}.Abs({d.FieldNames[i]});", 0);#>
    }


	/// <summary>Truncate each near-zero component of the current vector towards zero.</summary>
    public void Truncate()
    {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = ({d.DT.Math}.Abs({d.FieldNames[i]}) - 0.0001{d.FP.Literal} < 0) ? 0 : {d.FieldNames[i]};", 0);#>
    }

	/// <summary>Updates the component values to the power of the specified value.</summary>
    /// <param name="power"></param>
    public void Pow(<#=d.DT#> power)
    {
<#gen.IterateFields((i, field) => $"{d.FieldNames[i]} = {d.DT.Math}.Pow({d.FieldNames[i]}, power);", 0);#>
    }

    /// <summary>
    /// Calculates the length of the vector.
    /// </summary>
    /// <returns>The length of the vector.</returns>
    /// <remarks>
    /// <see cref="LengthSquared"/> may be preferred when only the relative length is needed
    /// and speed is of the essence.
    /// </remarks>
    public <#=d.DT#> Length()
    {
        return <#=d.DT.Math#>.Sqrt(<#for(int p = 0; p < size; p++){#>(<#=d.FieldNames[p]#> * <#=d.FieldNames[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
    }

    /// <summary>
    /// Calculates the distance between two vectors.
    /// </summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <returns>The distance between the two vectors.</returns>
    /// <remarks>
    /// <see cref="<#=d.Name#>.DistanceSquared(<#=d.Name#>, <#=d.Name#>)"/> may be preferred when only the relative distance is needed
    /// and speed is of the essence.
    /// </remarks>
    public static <#=d.DT#> Distance(ref <#=d.Name#> value1, ref <#=d.Name#> value2)
    {
<#gen.IterateFields((i, field) => $"{d.DT} {d.ArgNames[i]} = value1.{d.FieldNames[i]} - value2.{d.FieldNames[i]};", 0);#>
        return <#=d.DT.Math#>.Sqrt(<#for(int p = 0; p < size; p++){#>(<#=d.ArgNames[p]#> * <#=d.ArgNames[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
    }

            /// <summary>
    /// Calculates the distance between two vectors.
    /// </summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <returns>The distance between the two vectors.</returns>
    /// <remarks>
    /// <see cref="<#=d.Name#>.DistanceSquared(<#=d.Name#>, <#=d.Name#>)"/> may be preferred when only the relative distance is needed
    /// and speed is of the essence.
    /// </remarks>
    public static <#=d.DT#> Distance(<#=d.Name#> value1, <#=d.Name#> value2)
    {
<#gen.IterateFields((i, field) => $"{d.DT} {d.ArgNames[i]} = value1.{d.FieldNames[i]} - value2.{d.FieldNames[i]};", 0);#>
        return <#=d.DT.Math#>.Sqrt(<#for(int p = 0; p < size; p++){#>(<#=d.ArgNames[p]#> * <#=d.ArgNames[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
    }

    /// <summary>
    /// Performs a Catmull-Rom interpolation using the specified positions.
    /// </summary>
    /// <param name="value1">The first position in the interpolation.</param>
    /// <param name="value2">The second position in the interpolation.</param>
    /// <param name="value3">The third position in the interpolation.</param>
    /// <param name="value4">The fourth position in the interpolation.</param>
    /// <param name="amount">Weighting factor.</param>
    public static <#=d.Name#> CatmullRom(ref <#=d.Name#> value1, ref <#=d.Name#> value2, ref <#=d.Name#> value3, ref <#=d.Name#> value4, <#=d.DT#> amount)
    {
        <#=d.FP#> squared = amount * amount;
        <#=d.FP#> cubed = amount * squared;

        return new <#=d.Name#>()
        {
<#
			for(int p = 0; p < size; p++)
			{
#>
			<#=d.FieldNames[p]#> = <#=d.DT.FPCast#>(0.5<#=d.FP.Literal#> * ((((2<#=d.FP.Literal#> * value2.<#=d.FieldNames[p]#>) + 
            ((-value1.<#=d.FieldNames[p]#> + value3.<#=d.FieldNames[p]#>) * amount)) + 
            (((((2<#=d.FP.Literal#> * value1.<#=d.FieldNames[p]#>) - (5<#=d.FP.Literal#> * value2.<#=d.FieldNames[p]#>)) + (4<#=d.FP.Literal#> * value3.<#=d.FieldNames[p]#>)) - value4.<#=d.FieldNames[p]#>) * squared)) +
            ((((-value1.<#=d.FieldNames[p]#> + (3<#=d.FP.Literal#> * value2.<#=d.FieldNames[p]#>)) - (3<#=d.FP.Literal#> * value3.<#=d.FieldNames[p]#>)) + value4.<#=d.FieldNames[p]#>) * cubed))),

<#
			}
#>
        };
    }

    /// <summary>
    /// Performs a Catmull-Rom interpolation using the specified positions.
    /// </summary>
    /// <param name="value1">The first position in the interpolation.</param>
    /// <param name="value2">The second position in the interpolation.</param>
    /// <param name="value3">The third position in the interpolation.</param>
    /// <param name="value4">The fourth position in the interpolation.</param>
    /// <param name="amount">Weighting factor.</param>
    /// <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    public static <#=d.Name#> CatmullRom(<#=d.Name#> value1, <#=d.Name#> value2, <#=d.Name#> value3, <#=d.Name#> value4, <#=d.DT#> amount)
    {
        return CatmullRom(ref value1, ref value2, ref value3, ref value4, amount);
    }

        	/// <summary>
    /// Performs a Hermite spline interpolation.
    /// </summary>
    /// <param name="value1">First source position <#=gen.See()#> vector.</param>
    /// <param name="tangent1">First source tangent <#=gen.See()#> vector.</param>
    /// <param name="value2">Second source position <#=gen.See()#> vector.</param>
    /// <param name="tangent2">Second source tangent <#=gen.See()#> vector.</param>
    /// <param name="amount">Weighting factor.</param>
    public static <#=d.Name#> Hermite(ref <#=d.Name#> value1, ref <#=d.Name#> tangent1, ref <#=d.Name#> value2, ref <#=d.Name#> tangent2, <#=d.DT#> amount)
    {
        <#=d.FP#> squared = amount * amount;
        <#=d.FP#> cubed = amount * squared;
        <#=d.FP#> part1 = ((2.0<#=d.FP.Literal#> * cubed) - (3.0<#=d.FP.Literal#> * squared)) + <#=d.FP.One#>;
        <#=d.FP#> part2 = (-2.0<#=d.FP.Literal#> * cubed) + (3.0<#=d.FP.Literal#> * squared);
        <#=d.FP#> part3 = (cubed - (2.0<#=d.FP.Literal#> * squared)) + amount;
        <#=d.FP#> part4 = cubed - squared;

		return new <#=d.Name#>()
		{
<#
	for(int p = 0; p < size; p++)
	{
		if(d.DT == d.FP)
		{
#>
			<#=d.FieldNames[p]#> = (((value1.<#=d.FieldNames[p]#> * part1) + (value2.<#=d.FieldNames[p]#> * part2)) + (tangent1.<#=d.FieldNames[p]#> * part3)) + (tangent2.<#=d.FieldNames[p]#> * part4),
<#
		}
		else
		{
#>
			<#=d.FieldNames[p]#> = <#=d.DT.FPCast#>((((value1.<#=d.FieldNames[p]#> * part1) + (value2.<#=d.FieldNames[p]#> * part2)) + (tangent1.<#=d.FieldNames[p]#> * part3)) + (tangent2.<#=d.FieldNames[p]#> * part4)),
<#
		}
	}
#>
		};
    }

    /// <summary>
    /// Performs a Hermite spline interpolation.
    /// </summary>
    /// <param name="value1">First source position <#=gen.See()#>.</param>
    /// <param name="tangent1">First source tangent <#=gen.See()#>.</param>
    /// <param name="value2">Second source position <#=gen.See()#>.</param>
    /// <param name="tangent2">Second source tangent <#=gen.See()#>.</param>
    /// <param name="amount">Weighting factor.</param>
    /// <returns>The result of the Hermite spline interpolation.</returns>
    public static <#=d.Name#> Hermite(<#=d.Name#> value1, <#=d.Name#> tangent1, <#=d.Name#> value2, <#=d.Name#> tangent2, <#=d.DT#> amount)
    {
        return Hermite(ref value1, ref tangent1, ref value2, ref tangent2, amount);
    }

#region Static Methods
	/// <summary>Truncate each near-zero component of a vector towards zero.</summary>
    /// <param name="value">The <#=d.Name#> to be truncated.</param>
    /// <returns></returns>
    public static <#=d.Name#> Truncate(<#=d.Name#> value)
    {
        return new <#=d.Name#>()
        {
<#gen.IterateFields((i, field) => $"\t{d.FieldNames[i]} = ({d.DT.Math}.Abs(value.{d.FieldNames[i]}) - 0.0001{d.FP.Literal} < 0) ? 0 : value.X{(i < size-1 ? "," : "")}", 0);#>
        };
    }
#endregion
}
<#
});
#>
