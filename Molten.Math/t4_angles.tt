<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string _pMap = "xyzw";
string _pMapUpper = "XYZW";

GenerateTypes(this.GenerationEnvironment, this.Host, "", "def_angles.json", null, new int[] {4}, null, (d, md, defs) =>
{
    string vectorName = $"Vector3{d.Postfix}";
    md.Name = $"{d.Name}{d.Postfix}";
#>
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;

namespace Molten<#=d.DT.SubNamespace#>
{
	///<summary>Represents a four dimensional mathematical <#=md.Name#>.</summary>
	[StructLayout(LayoutKind.Explicit)]
    [Serializable]
	public partial struct <#=md.Name#> : IFormattable, IEquatable<<#=md.Name#>>
	{
		/// <summary>
        /// A value that specifies the size of a single degree.
        /// </summary>
        public const <#=d.DT#> Degree = 0.002777777777777778<#=d.FP.Literal#>;

        /// <summary>
        /// A value that specifies the size of a single minute.
        /// </summary>
        public const <#=d.DT#> Minute = 0.000046296296296296<#=d.FP.Literal#>;

        /// <summary>
        /// A value that specifies the size of a single second.
        /// </summary>
        public const <#=d.DT#> Second = 0.000000771604938272<#=d.FP.Literal#>;

        /// <summary>
        /// A value that specifies the size of a single radian.
        /// </summary>
        public const <#=d.DT#> Radian = 0.159154943091895336<#=d.FP.Literal#>;

        /// <summary>
        /// A value that specifies the size of a single milliradian.
        /// </summary>
        public const <#=d.DT#> Milliradian = 0.0001591549431<#=d.FP.Literal#>;

        /// <summary>
        /// A value that specifies the size of a single gradian.
        /// </summary>
        public const <#=d.DT#> Gradian = 0.0025<#=d.FP.Literal#>;

         /// <summary>
        /// The internal representation of the angle.
        /// </summary>
        [FieldOffset(0)]
        [DataMember]
        <#=d.DT#> radians;

        [FieldOffset(0)]
        [DataMember]
        private int radiansInt;

         /// <summary>
        /// Initializes a new instance of the <see cref="Angle<#=d.Postfix#>"/> structure with the
        /// given unit dependant angle and unit type.
        /// </summary>
        /// <param name="angle">A unit dependant measure of the angle.</param>
        /// <param name="type">The type of unit the angle argument is.</param>
        public <#=md.Name#>(<#=d.DT#> angle, AngleType type)
        {
            radiansInt = 0;
            switch (type)
            {
                case AngleType.Revolution:
                    radians = MathHelper.RevolutionsToRadians(angle);
                    break;

                case AngleType.Degree:
                    radians = MathHelper.DegreesToRadians(angle);
                    break;

                case AngleType.Radian:
                    radians = angle;
                    break;

                case AngleType.Gradian:
                    radians = MathHelper.GradiansToRadians(angle);
                    break;

                default:
                    radians = 0<#=d.FP.Literal#>;
                    break;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Angle<#=d.Postfix#>"/> structure using the
        /// arc length formula (θ = s/r).
        /// </summary>
        /// <param name="arcLength">The measure of the arc.</param>
        /// <param name="radius">The radius of the circle.</param>
        public <#=md.Name#>(<#=d.DT#> arcLength, <#=d.DT#> radius)
        {
            radiansInt = 0;
            radians = arcLength / radius;
        }

        /// <summary>
        /// Wraps this <see cref="Angle<#=d.Postfix#>"/> to be in the range [π, -π].
        /// </summary>
        public void Wrap()
        {
            radians = MathHelper.WrapAngle(radians);
        }

        /// <summary>
        /// Wraps this <see cref="Angle<#=d.Postfix#>"/> to be in the range [0, 2π).
        /// </summary>
        public void WrapPositive()
        {
            <#=d.DT#> newangle = radians % <#=d.DT#>.Tau;

            if (newangle < 0.0)
                newangle += <#=d.DT#>.Tau;

            radians = newangle;
        }

        /// <summary>
        /// Gets or sets the total number of revolutions this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// </summary>
        public <#=d.DT#> Revolutions
        {
            get => MathHelper.RadiansToRevolutions(radians);
            set => radians = MathHelper.RevolutionsToRadians(value);
        }

        /// <summary>
        /// Gets or sets the total number of degrees this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// </summary>
        public <#=d.DT#> Degrees
        {
            get => MathHelper.RadiansToDegrees(radians);
            set => radians = MathHelper.DegreesToRadians(value);
        }

        /// <summary>
        /// Gets or sets the minutes component of the degrees this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// When setting the minutes, if the value is in the range (-60, 60) the whole degrees are
        /// not changed; otherwise, the whole degrees may be changed. Fractional values may set
        /// the seconds component.
        /// </summary>
        public <#=d.DT#> Minutes
        {
            get
            {
                <#=d.DT#> degrees = MathHelper.RadiansToDegrees(radians);

                if (degrees < 0)
                {
                    <#=d.DT#> degreesfloor = <#=d.DT.Math#>.Ceiling(degrees);
                    return (degrees - degreesfloor) * 60.0<#=d.FP.Literal#>;
                }
                else
                {
                    <#=d.DT#> degreesfloor = <#=d.DT.Math#>.Floor(degrees);
                    return (degrees - degreesfloor) * 60.0<#=d.FP.Literal#>;
                }
            }
            set
            {
                <#=d.DT#> degrees = MathHelper.RadiansToDegrees(radians);
                <#=d.DT#> degreesfloor = <#=d.DT.Math#>.Floor(degrees);

                degreesfloor += value / 60.0<#=d.FP.Literal#>;
                radians = MathHelper.DegreesToRadians(degreesfloor);
            }
        }

        /// <summary>
        /// Gets or sets the seconds of the degrees this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// When setting the seconds, if the value is in the range (-60, 60) the whole minutes
        /// or whole degrees are not changed; otherwise, the whole minutes or whole degrees
        /// may be changed.
        /// </summary>
        public <#=d.DT#> Seconds
        {
            get
            {
                <#=d.DT#> degrees = MathHelper.RadiansToDegrees(radians);

                if (degrees < 0)
                {
                    <#=d.DT#> degreesfloor = <#=d.DT.Math#>.Ceiling(degrees);

                    <#=d.DT#> minutes = (degrees - degreesfloor) * 60.0<#=d.FP.Literal#>;
                    <#=d.DT#> minutesfloor = <#=d.DT.Math#>.Ceiling(minutes);

                    return (minutes - minutesfloor) * 60.0<#=d.FP.Literal#>;
                }
                else
                {
                    <#=d.DT#> degreesfloor = <#=d.DT.Math#>.Floor(degrees);

                    <#=d.DT#> minutes = (degrees - degreesfloor) * 60.0<#=d.FP.Literal#>;
                    <#=d.DT#> minutesfloor = <#=d.DT.Math#>.Floor(minutes);

                    return (minutes - minutesfloor) * 60.0<#=d.FP.Literal#>;
                }
            }
            set
            {
                <#=d.DT#> degrees = MathHelper.RadiansToDegrees(radians);
                <#=d.DT#> degreesfloor = <#=d.DT.Math#>.Floor(degrees);

                <#=d.DT#> minutes = (degrees - degreesfloor) * 60.0<#=d.FP.Literal#>;
                <#=d.DT#> minutesfloor = <#=d.DT.Math#>.Floor(minutes);

                minutesfloor += value / 60.0<#=d.FP.Literal#>;
                degreesfloor += minutesfloor / 60.0<#=d.FP.Literal#>;
                radians = MathHelper.DegreesToRadians(degreesfloor);
            }
        }
        
        /// <summary>
        /// Gets or sets the total number of radians this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// </summary>
        public <#=d.DT#> Radians
        {
            get => radians;
            set => radians = value;
        }

        /// <summary>
        /// Gets or sets the total number of milliradians this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// One milliradian is equal to 1/(2000π).
        /// </summary>
        public <#=d.DT#> Milliradians
        {
            get => radians / (Milliradian * <#=d.DT#>.Tau);
            set => radians = value * (Milliradian * <#=d.DT#>.Tau);
        }

        /// <summary>
        /// Gets or sets the total number of gradians this <see cref="Angle<#=d.Postfix#>"/> represents.
        /// </summary>
        public <#=d.DT#> Gradians
        {
            get => MathHelper.RadiansToGradians(radians);
            set => radians = MathHelper.RadiansToGradians(value);
        }

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is a right angle (i.e. 90° or π/2).
        /// </summary>
        public bool IsRight => radians == MathHelper.Constants<<#=d.DT#>>.PiOverTwo; 

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is a straight angle (i.e. 180° or π).
        /// </summary>
        public bool IsStraight => radians == <#=d.DT#>.Pi;

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is a full rotation angle (i.e. 360° or 2π).
        /// </summary>
        public bool IsFullRotation => radians == <#=d.DT#>.Tau;

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is an oblique angle (i.e. is not 90° or a multiple of 90°).
        /// </summary>
        public bool IsOblique => WrapPositive(this).radians != MathHelper.Constants<<#=d.DT#>>.PiOverTwo; 

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is an acute angle (i.e. less than 90° but greater than 0°).
        /// </summary>
        public bool IsAcute => radians > 0.0 && radians < MathHelper.Constants<<#=d.DT#>>.PiOverTwo;

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is an obtuse angle (i.e. greater than 90° but less than 180°).
        /// </summary>
        public bool IsObtuse => radians > MathHelper.Constants<<#=d.DT#>>.PiOverTwo && radians < <#=d.DT#>.Pi;

        /// <summary>
        /// Gets a System.Boolean that determines whether this <see cref="Angle<#=d.Postfix#>"/>
        /// is a reflex angle (i.e. greater than 180° but less than 360°).
        /// </summary>
        public bool IsReflex => radians > <#=d.DT#>.Pi && radians < <#=d.DT#>.Tau;

        /// <summary>
        /// Gets a <see cref="Angle<#=d.Postfix#>"/> instance that complements this angle (i.e. the two angles add to 90°).
        /// </summary>
        public Angle<#=d.Postfix#> Complement => new Angle<#=d.Postfix#>(MathHelper.Constants<<#=d.DT#>>.PiOverTwo - radians, AngleType.Radian);

        /// <summary>
        /// Gets a <see cref="Angle<#=d.Postfix#>"/> instance that supplements this angle (i.e. the two angles add to 180°).
        /// </summary>
        public Angle<#=d.Postfix#> Supplement => new Angle<#=d.Postfix#>(<#=d.DT#>.Pi - radians, AngleType.Radian);

        /// <summary>
        /// Wraps the <see cref="Angle<#=d.Postfix#>"/> given in the value argument to be in the range [π, -π].
        /// </summary>
        /// <param name="value">A <see cref="Angle<#=d.Postfix#>"/> to wrap.</param>
        /// <returns>The <see cref="Angle<#=d.Postfix#>"/> that is wrapped.</returns>
        public static Angle<#=d.Postfix#> Wrap(Angle<#=d.Postfix#> value)
        {
            value.Wrap();
            return value;
        }

                /// <summary>
        /// Wraps the <see cref="Angle<#=d.Postfix#>"/> given in the value argument to be in the range [π, -π].
        /// </summary>
        /// <param name="value">A <see cref="Angle<#=d.Postfix#>"/> to wrap.</param>
        /// <returns>The <see cref="Angle<#=d.Postfix#>"/> that is wrapped.</returns>
        public static Angle<#=d.Postfix#> Wrap(ref Angle<#=d.Postfix#> value)
        {
            value.Wrap();
            return value;
        }

        /// <summary>
        /// Wraps the <see cref="Angle<#=d.Postfix#>"/> given in the value argument to be in the range [0, 2π).
        /// </summary>
        /// <param name="value">A <see cref="Angle<#=d.Postfix#>"/> to wrap.</param>
        /// <returns>The <see cref="Angle<#=d.Postfix#>"/> that is wrapped.</returns>
        public static Angle<#=d.Postfix#> WrapPositive(Angle<#=d.Postfix#> value)
        {
            value.WrapPositive();
            return value;
        }

                /// <summary>
        /// Compares two <see cref="Angle<#=d.Postfix#>"/> instances and returns the smaller angle.
        /// </summary>
        /// <param name="left">The first <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <param name="right">The second <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <returns>The smaller of the two given <see cref="Angle<#=d.Postfix#>"/> instances.</returns>
        public static Angle<#=d.Postfix#> Min(ref Angle<#=d.Postfix#> left, ref Angle<#=d.Postfix#> right)
        {
            if (left.radians < right.radians)
                return left;

            return right;
        }

        /// <summary>
        /// Compares two <see cref="Angle<#=d.Postfix#>"/> instances and returns the smaller angle.
        /// </summary>
        /// <param name="left">The first <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <param name="right">The second <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <returns>The smaller of the two given <see cref="Angle<#=d.Postfix#>"/> instances.</returns>
        public static Angle<#=d.Postfix#> Min(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            if (left.radians < right.radians)
                return left;

            return right;
        }

        /// <summary>
        /// Compares two <see cref="Angle<#=d.Postfix#>"/> instances and returns the greater angle.
        /// </summary>
        /// <param name="left">The first <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <param name="right">The second <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <returns>The greater of the two given <see cref="Angle<#=d.Postfix#>"/> instances.</returns>
        public static Angle<#=d.Postfix#> Max(ref Angle<#=d.Postfix#> left, ref Angle<#=d.Postfix#> right)
        {
            if (left.radians > right.radians)
                return left;

            return right;
        }

        /// <summary>
        /// Compares two <see cref="Angle<#=d.Postfix#>"/> instances and returns the greater angle.
        /// </summary>
        /// <param name="left">The first <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <param name="right">The second <see cref="Angle<#=d.Postfix#>"/> instance to compare.</param>
        /// <returns>The greater of the two given <see cref="Angle<#=d.Postfix#>"/> instances.</returns>
        public static Angle<#=d.Postfix#> Max(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            if (left.radians > right.radians)
                return left;

            return right;
        }

        /// <summary>
        /// Adds two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The first object to add.</param>
        /// <param name="right">The second object to add.</param>
        /// <returns>The value of the two objects added together.</returns>
        public static Angle<#=d.Postfix#> Add(ref Angle<#=d.Postfix#> left, ref Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians + right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Subtracts two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The first object to subtract.</param>
        /// <param name="right">The second object to subtract.</param>
        /// <returns>The value of the two objects subtracted.</returns>
        public static Angle<#=d.Postfix#> Subtract(ref Angle<#=d.Postfix#> left, ref Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians - right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Multiplies two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The first object to multiply.</param>
        /// <param name="right">The second object to multiply.</param>
        /// <returns>The value of the two objects multiplied together.</returns>
        public static Angle<#=d.Postfix#> Multiply(ref Angle<#=d.Postfix#> left, ref Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians * right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Divides two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The numerator object.</param>
        /// <param name="right">The denominator object.</param>
        /// <returns>The value of the two objects divided.</returns>
        public static Angle<#=d.Postfix#> Divide(ref Angle<#=d.Postfix#> left, ref Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians / right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Gets a new <see cref="Angle<#=d.Postfix#>"/> instance that represents the zero angle (i.e. 0°).
        /// </summary>
        public static Angle<#=d.Postfix#> ZeroAngle => new Angle<#=d.Postfix#>(0.0<#=d.FP.Literal#>, AngleType.Radian); 

        /// <summary>
        /// Gets a new <see cref="Angle<#=d.Postfix#>"/> instance that represents the right angle (i.e. 90° or π/2).
        /// </summary>
        public static Angle<#=d.Postfix#> RightAngle => new Angle<#=d.Postfix#>(MathHelper.Constants<<#=d.DT#>>.PiOverTwo, AngleType.Radian);

        /// <summary>
        /// Gets a new <see cref="Angle<#=d.Postfix#>"/> instance that represents the straight angle (i.e. 180° or π).
        /// </summary>
        public static Angle<#=d.Postfix#> StraightAngle => new Angle<#=d.Postfix#>(<#=d.DT#>.Pi, AngleType.Radian);

        /// <summary>
        /// Gets a new <see cref="Angle<#=d.Postfix#>"/> instance that represents the full rotation angle (i.e. 360° or 2π).
        /// </summary>
        public static Angle<#=d.Postfix#> FullRotationAngle => new Angle<#=d.Postfix#>(<#=d.DT#>.Tau, AngleType.Radian);

        /// <summary>
        /// Returns a System.Boolean that indicates whether the values of two <see cref="Angle<#=d.Postfix#>"/>
        /// objects are equal.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>True if the left and right parameters have the same value; otherwise, false.</returns>
        public static bool operator ==(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return left.radians == right.radians;
        }

        /// <summary>
        /// Returns a System.Boolean that indicates whether the values of two <see cref="Angle<#=d.Postfix#>"/>
        /// objects are not equal.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>True if the left and right parameters do not have the same value; otherwise, false.</returns>
        public static bool operator !=(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return left.radians != right.radians;
        }

        /// <summary>
        /// Returns a System.Boolean that indicates whether a <see cref="Angle<#=d.Postfix#>"/>
        /// object is less than another <see cref="Angle<#=d.Postfix#>"/> object.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>True if left is less than right; otherwise, false.</returns>
        public static bool operator <(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return left.radians < right.radians;
        }

        /// <summary>
        /// Returns a System.Boolean that indicates whether a <see cref="Angle<#=d.Postfix#>"/>
        /// object is greater than another <see cref="Angle<#=d.Postfix#>"/> object.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>True if left is greater than right; otherwise, false.</returns>
        public static bool operator >(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return left.radians > right.radians;
        }

        /// <summary>
        /// Returns a System.Boolean that indicates whether a <see cref="Angle<#=d.Postfix#>"/>
        /// object is less than or equal to another <see cref="Angle<#=d.Postfix#>"/> object.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>True if left is less than or equal to right; otherwise, false.</returns>
        public static bool operator <=(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return left.radians <= right.radians;
        }

        /// <summary>
        /// Returns a System.Boolean that indicates whether a <see cref="Angle<#=d.Postfix#>"/>
        /// object is greater than or equal to another <see cref="Angle<#=d.Postfix#>"/> object.
        /// </summary>
        /// <param name="left">The first object to compare.</param>
        /// <param name="right">The second object to compare.</param>
        /// <returns>True if left is greater than or equal to right; otherwise, false.</returns>
        public static bool operator >=(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return left.radians >= right.radians;
        }

        /// <summary>
        /// Returns the value of the <see cref="Angle<#=d.Postfix#>"/> operand. (The sign of
        /// the operand is unchanged.)
        /// </summary>
        /// <param name="value">A <see cref="Angle<#=d.Postfix#>"/> object.</param>
        /// <returns>The value of the value parameter.</returns>
        public static Angle<#=d.Postfix#> operator +(Angle<#=d.Postfix#> value)
        {
            return value;
        }

        /// <summary>
        /// Returns the the negated value of the <see cref="Angle<#=d.Postfix#>"/> operand.
        /// </summary>
        /// <param name="value">A <see cref="Angle<#=d.Postfix#>"/> object.</param>
        /// <returns>The negated value of the value parameter.</returns>
        public static Angle<#=d.Postfix#> operator -(Angle<#=d.Postfix#> value)
        {
            return new Angle<#=d.Postfix#>(-value.radians, AngleType.Radian);
        }

        /// <summary>
        /// Adds two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The first object to add.</param>
        /// <param name="right">The second object to add.</param>
        /// <returns>The value of the two objects added together.</returns>
        public static Angle<#=d.Postfix#> operator +(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians + right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Subtracts two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The first object to subtract</param>
        /// <param name="right">The second object to subtract.</param>
        /// <returns>The value of the two objects subtracted.</returns>
        public static Angle<#=d.Postfix#> operator -(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians - right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Multiplies two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The first object to multiply.</param>
        /// <param name="right">The second object to multiply.</param>
        /// <returns>The value of the two objects multiplied together.</returns>
        public static Angle<#=d.Postfix#> operator *(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians * right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Divides two <see cref="Angle<#=d.Postfix#>"/> objects and returns the result.
        /// </summary>
        /// <param name="left">The numerator object.</param>
        /// <param name="right">The denominator object.</param>
        /// <returns>The value of the two objects divided.</returns>
        public static Angle<#=d.Postfix#> operator /(Angle<#=d.Postfix#> left, Angle<#=d.Postfix#> right)
        {
            return new Angle<#=d.Postfix#>(left.radians / right.radians, AngleType.Radian);
        }

        /// <summary>
        /// Compares this instance to a specified object and returns an integer that
        /// indicates whether the value of this instance is less than, equal to, or greater
        /// than the value of the specified object.
        /// </summary>
        /// <param name="other">The object to compare.</param>
        /// <returns>
        /// A signed integer that indicates the relationship of the current instance
        /// to the obj parameter. If the value is less than zero, the current instance
        /// is less than the other. If the value is zero, the current instance is equal
        /// to the other. If the value is greater than zero, the current instance is
        /// greater than the other.
        /// </returns>
        public int CompareTo(object other)
        {
            if (other == null)
                return 1;

            if (!(other is Angle<#=d.Postfix#>))
                throw new ArgumentException("Argument must be of type Angle.", "other");

            <#=d.DT#> radians = ((Angle<#=d.Postfix#>)other).radians;

            if (this.radians > radians)
                return 1;

            if (this.radians < radians)
                return -1;

            return 0;
        }

        /// <summary>
        /// Compares this instance to a second <see cref="Angle<#=d.Postfix#>"/> and returns
        /// an integer that indicates whether the value of this instance is less than,
        /// equal to, or greater than the value of the specified object.
        /// </summary>
        /// <param name="other">The object to compare.</param>
        /// <returns>
        /// A signed integer that indicates the relationship of the current instance
        /// to the obj parameter. If the value is less than zero, the current instance
        /// is less than the other. If the value is zero, the current instance is equal
        /// to the other. If the value is greater than zero, the current instance is
        /// greater than the other.
        /// </returns>
        public int CompareTo(Angle<#=d.Postfix#> other)
        {
            if (this.radians > other.radians)
                return 1;

            if (this.radians < other.radians)
                return -1;

            return 0;
        }

        /// <summary>
        /// Returns a value that indicates whether the current instance and a specified
        /// <see cref="Angle<#=d.Postfix#>"/> object have the same value.
        /// </summary>
        /// <param name="other">The object to compare.</param>
        /// <returns>
        /// Returns true if this <see cref="Angle<#=d.Postfix#>"/> object and another have the same value;
        /// otherwise, false.
        /// </returns>
        public bool Equals(Angle<#=d.Postfix#> other)
        {
            return this == other;
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return string.Format(CultureInfo.CurrentCulture, MathHelper.RadiansToDegrees(radians).ToString("0.##°"));
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <param name="format">The format.</param>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public string ToString(string format)
        {
            if (format == null)
                return ToString();

            return string.Format(CultureInfo.CurrentCulture, "{0}°", MathHelper.RadiansToDegrees(radians).ToString(format, CultureInfo.CurrentCulture));
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public string ToString(IFormatProvider formatProvider)
        {
            return string.Format(formatProvider, MathHelper.RadiansToDegrees(radians).ToString("0.##°"));
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <param name="format">The format.</param>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (format == null)
                return ToString(formatProvider);

            return string.Format(formatProvider, "{0}°", MathHelper.RadiansToDegrees(radians).ToString(format, CultureInfo.CurrentCulture));
        }

        /// <summary>
        /// Returns a hash code for this <see cref="Angle<#=d.Postfix#>"/> instance.
        /// </summary>
        /// <returns>A 32-bit signed integer hash code.</returns>
        public override int GetHashCode()
        {
            return radiansInt;
        }

        /// <summary>
        /// Returns a value that indicates whether the current instance and a specified
        /// object have the same value.
        /// </summary>
        /// <param name="obj">The object to compare.</param>
        /// <returns>
        /// Returns true if the obj parameter is a <see cref="Angle<#=d.Postfix#>"/> object or a type
        /// capable of implicit conversion to a <see cref="Angle<#=d.Postfix#>"/> value, and
        /// its value is equal to the value of the current <see cref="Angle<#=d.Postfix#>"/>
        /// object; otherwise, false.
        /// </returns>
        public override bool Equals(object obj)
        {
            return (obj is Angle<#=d.Postfix#>) && (this == (Angle<#=d.Postfix#>)obj);
        }
	}
}
<#
});
#>
