<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string[] vecFieldNames = new string[]{"X", "Y", "Z", "W"};
TypeGenerator gen = new TypeGenerator(this.GenerationEnvironment, this.Host, "def_colors.json");

gen.Generate(null, (d, def) =>
{
    string vectorName = $"Vector{d.Size}{d.DT.Literal}";
    string blackParams = gen.FieldsToArgs(new string[] {$"{d.DT.Zero}", $"{d.DT.Zero}", $"{d.DT.Zero}"}, "" ,"" , 4, d.Size, $"{d.DT.One}");
    string whiteParams = gen.FieldsToArgs(new string[]{}, "", "", 3, d.Size, $"{d.DT.One}");
    string transparentParams = gen.FieldsToArgs(new string[]{}, "", "", 3, d.Size, $"{d.DT.Zero}");
#>
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
<#
    if(d.SubNamespace.Length == 0)
    {
#>
using Molten.DoublePrecision;
<#
    }
#>

namespace Molten<#=d.SubNamespace#>
{
	/// <summary>
    /// Represents a color in the form of <#=gen.FieldsToArgs(d.FieldLabels)#>.
    /// </summary>
    [StructLayout(LayoutKind.Explicit)]
    [DataContract]
    public struct <#=d.Name#> : IEquatable<<#=d.Name#>>, IFormattable
    {
        private const string toStringFormat = "R:{0} G:{1} B:{2}<#=(d.Size > 3 ? " A:{3}" : "")#>";

        /// <summary>
        /// Black (<#=blackParams#>).
        /// </summary>
        public static readonly <#=d.Name#> Black = new <#=d.Name#>(<#=blackParams#>);

        /// <summary>
        /// White (<#=whiteParams#>).
        /// </summary>
        public static readonly <#=d.Name#> White = new <#=d.Name#>(<#=whiteParams#>);

        /// <summary>
        /// Transparent (<#=transparentParams#>).
        /// </summary>
        public static readonly <#=d.Name#> Zero = new <#=d.Name#>(<#=transparentParams#>);

<#=gen.GenerateFields()#>
<#gen.GenerateStandardConstructors();#>
<#gen.GenerateUpgradeConstructors();#>
        /// <summary>
        /// Initializes a new instance of the <#=gen.See()#> struct.
        /// </summary>
        /// <param name="value">The <#=gen.FieldsToArgs(d.FieldNames)#> components of the color.</param>
        public <#=d.Name#>(<#=vectorName#> value)
        {
<#for(int i = 0; i < d.Size; i++){#>
            <#=d.FieldNames[i]#> = value.<#=vecFieldNames[i]#>;
<#}#>
        }

        /// <summary>
        /// Initializes a new instance of the <#=gen.See()#> struct.
        /// </summary>
        /// <param name="rgb">A packed integer containing all three color components in <#=gen.FieldsToArgs(d.FieldNames)#> order.
        /// The alpha component is ignored.</param>
        public <#=d.Name#>(int packed)
        {
            <#=(d.Size > 3 ? $"A = ((packed >> 24) & 255) / 255.0{d.DT.Literal};" : "")#>
            B = ((packed >> 16) & 255) / 255.0<#=d.DT.Literal#>;
            G = ((packed >> 8) & 255) / 255.0<#=d.DT.Literal#>;
            R = (packed & 255) / 255.0<#=d.DT.Literal#>;
        }

        /// <summary>
        /// Gets or sets the component at the specified index.
        /// </summary>
        /// <value>The value of a component, depending on the index.</value>
        /// <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component and so on. This must be between 0 and <#=(d.Size - 1)#></param>
        /// <returns>The value of the component at the specified index.</returns>
        /// <exception cref="IndexOutOfRangeException">Thrown when the <paramref name="index"/> is outside the range [0, <#=(d.Size-1)#>].</exception>  
		public unsafe <#=d.DT#> this[int index]
		{
			get
            {
                if(index > <#=(d.Size-1)#> || index < 0)
                    throw new IndexOutOfRangeException("Index for <#=d.Name#> must be between from 0 to <#=(d.Size-1)#>, inclusive.");

                return Values[index];
            }
            set
            {
                if (index > <#=(d.Size-1)#> || index < 0)
                    throw new IndexOutOfRangeException("Index for <#=d.Name#> must be between from 0 to <#=(d.Size-1)#>, inclusive.");

                Values[index] = value;
            }
		}

        /// <summary>
        /// Gets or sets the component at the specified index.
        /// </summary>
        /// <value>The value of the red, green, or blue component, depending on the index.</value>
        /// <param name="index">The index of the component to access. Use 0 for the red component, 1 for the green component, and 2 for the blue component.</param>
        /// <returns>The value of the component at the specified index.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, <#=(d.Size-1)#>].</exception>
        public unsafe <#=d.DT#> this[uint index]
		{
			get
            {
                if(index > <#=(d.Size-1)#>)
                    throw new IndexOutOfRangeException("Index for <#=d.Name#> must be between from 0 to <#=(d.Size-1)#>, inclusive.");

                return Values[index];
            }
            set
            {
                if (index > <#=(d.Size-1)#>)
                    throw new IndexOutOfRangeException("Index for <#=d.Name#> must be between from 0 to <#=(d.Size-1)#>, inclusive.");

                Values[index] = value;
            }
		}

        /// <summary>
        /// Converts the color into a packed integer.
        /// </summary>
        /// <returns>A packed integer containing all three color components.
        /// The alpha channel is set to 255.</returns>
        public int PackRGBA()
        {
<#gen.IterateFields((i, field) => $"uint {d.ArgNames[i]} = (uint)({field} * 255.0{d.DT.Literal}) & 255;");#>
<#if(d.Size < 4){#>
            uint a = 255;
<#}#>

            uint value = r;
            value |= g << 8;
            value |= b << 16;
            value |= a << 24;

            return (int)value;
        }

        /// <summary>
        /// Converts the color into a packed integer.
        /// </summary>
        /// <returns>A packed integer containing all <#=def.SizeNames[d.Size]#> color components.<#=(d.Size < 4 ? "The alpha channel is set to 255." : "")#></returns>
        public int PackBGRA()
        {
<#gen.IterateFields((i, field) => $"uint {d.ArgNames[i]} = (uint)({field} * 255.0{d.DT.Literal}) & 255;");#>
<#if(d.Size < 4){#>
            uint a = 255;
<#}#>

            uint value = b;
            value |= g << 8;
            value |= r << 16;
            value |= a << 24;

            return (int)value;
        }

        /// <summary>
        /// Converts the color into a three component vector.
        /// </summary>
        /// <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        public <#=vectorName#> ToVector()
        {
            return new <#=vectorName#>(<#=gen.FieldsToArgs(d.FieldNames)#>);
        }

        /// <summary>
        /// Creates an array containing the elements of the color.
        /// </summary>
        /// <returns>A three-element array containing the components of the color.</returns>
        public <#=d.DT#>[] ToArray()
        {
            return new <#=d.DT#>[] { <#=gen.FieldsToArgs(d.FieldNames)#> };
        }

<#gen.GenerateOperator("+", "add");#>
<#gen.GenerateOperator("+", "add", d.DT.Name);#>

<#gen.GenerateOperator("-", "subtract");#>
<#gen.GenerateOperator("-", "subtract", d.DT.Name);#>

<#gen.GenerateOperator("*", "modulate");#>
<#gen.GenerateOperator("*", "modulate", d.DT.Name);#>

<#gen.GenerateOperator("/", "divide");#>
<#gen.GenerateOperator("/", "divide", d.DT.Name);#>

        /// <summary>
        /// Scales a color.
        /// </summary>
        /// <param name="value">The color to scale.</param>
        /// <param name="scale">The amount by which to scale.</param>
        /// <param name="result">When the method completes, contains the scaled color.</param>
        public static void Scale(ref <#=d.Name#> value, <#=d.DT#> scale, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = value.{field} * scale;");#>
        }

        /// <summary>
        /// Scales a color.
        /// </summary>
        /// <param name="value">The color to scale.</param>
        /// <param name="scale">The amount by which to scale.</param>
        /// <returns>The scaled color.</returns>
        public static <#=d.Name#> Scale(<#=d.Name#> value, <#=d.DT#> scale)
        {
            return new <#=d.Name#>(<#=gen.FieldsToArgs(d.FieldNames, "value.", " * scale")#>);
        }

        /// <summary>
        /// Negates a color.
        /// </summary>
        /// <param name="value">The color to negate.</param>
        /// <param name="result">When the method completes, contains the negated color.</param>
        public static void Negate(ref <#=d.Name#> value, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = {d.DT.One} - value.{field};");#>
        }

        /// <summary>
        /// Negates a color.
        /// </summary>
        /// <param name="value">The color to negate.</param>
        /// <returns>The negated color.</returns>
        public static <#=d.Name#> Negate(<#=d.Name#> value)
        {
            return new <#=d.Name#>(<#=gen.FieldsToArgs(d.FieldNames, $"{d.DT.One} - value.")#>);
        }

        /// <summary>
        /// Restricts a color to within the component ranges of the specified min and max colors.
        /// </summary>
        /// <param name="value">The value to clamp.</param>
        /// <param name="min">The minimum value.</param>
        /// <param name="max">The maximum value.</param>
        /// <param name="result">When the method completes, contains the clamped value.</param>
        public static void Clamp(ref <#=d.Name#> value, ref <#=d.Name#> min, ref <#=d.Name#> max, out <#=d.Name#> result)
        {
<#
    for(int i = 0; i < d.Size; i++)
    {
        string n = d.FieldLabels[i];
        string p = d.FieldNames[i];
#>
            <#=d.DT#> <#=n#> = value.<#=p#>;
            <#=n#> = (<#=n#> > max.<#=p#>) ? max.<#=p#> : <#=n#>;
            <#=n#> = (<#=n#> < min.<#=p#>) ? min.<#=p#> : <#=n#>;

<#
    }
#>
            result = new <#=d.Name#>(<#=gen.FieldsToArgs(d.FieldLabels)#>);
        }

        /// <summary>
        /// Restricts the current <#=gen.See()#> to within the component ranges of the specified min and max colors.
        /// </summary>
        /// <param name="min">The minimum value.</param>
        /// <param name="max">The maximum value.</param>
        public void Clamp(ref <#=d.Name#> min, ref <#=d.Name#> max)
        {
<#
    for(int i = 0; i < d.Size; i++)
    {
        string p = d.FieldNames[i];
#>
            <#=p#> = (<#=p#> > max.<#=p#>) ? max.<#=p#> : <#=p#>;
            <#=p#> = (<#=p#> < min.<#=p#>) ? min.<#=p#> : <#=p#>;
<#
    }
#>
        }

        /// <summary>
        /// Restricts each color component to within the specified range.
        /// </summary>
        /// <param name="value">The value to clamp.</param>
        /// <param name="min">The minimum value.</param>
        /// <param name="max">The maximum value.</param>
        /// <param name="result">When the method completes, contains the clamped value.</param>
        public static void Clamp(ref <#=d.Name#> value, <#=d.DT#> min, <#=d.DT#> max, out <#=d.Name#> result)
        {
<#
    for(int i = 0; i < d.Size; i++)
    {
        string n = d.FieldLabels[i];
        string p = d.FieldNames[i];
#>
            <#=d.DT#> <#=n#> = value.<#=p#>;
            <#=n#> = (<#=n#> > max) ? max : <#=n#>;
            <#=n#> = (<#=n#> < min) ? min : <#=n#>;

<#
    }
#>
            result = new <#=d.Name#>(<#=gen.FieldsToArgs(d.FieldLabels)#>);
        }

        /// <summary>
        /// Restricts each color component to within the specified range.
        /// </summary>
        /// <param name="value">The value to clamp.</param>
        /// <param name="min">The minimum value.</param>
        /// <param name="max">The maximum value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=d.Name#> Clamp(ref <#=d.Name#> value, <#=d.DT#> min, <#=d.DT#> max)
        {
            Clamp(ref value, min, max, out <#=d.Name#> result);
            return result;
        }

        /// <summary>
        /// Restricts each component of the current <#=gen.See()#> to within the specified range.
        /// </summary>
        /// <param name="min">The minimum value.</param>
        /// <param name="max">The maximum value.</param>
        public void Clamp(<#=d.DT#> min, <#=d.DT#> max)
        {
<#
    for(int i = 0; i < d.Size; i++)
    {
        string p = d.FieldNames[i];
#>
            <#=p#> = (<#=p#> > max) ? max : <#=p#>;
            <#=p#> = (<#=p#> < min) ? min : <#=p#>;
<#
    }
#>
        }

        /// <summary>
        /// Performs a linear interpolation between two colors.
        /// </summary>
        /// <param name="start">Start color.</param>
        /// <param name="end">End color.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
        /// <remarks>
        /// Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
        /// </remarks>
        public static void Lerp(ref <#=d.Name#> start, ref <#=d.Name#> end, <#=d.DT#> amount, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = MathHelper.Lerp(start.{field}, end.{field}, amount);");#>
        }

        /// <summary>
        /// Performs a linear interpolation between two colors.
        /// </summary>
        /// <param name="start">Start color.</param>
        /// <param name="end">End color.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <returns>The linear interpolation of the two colors.</returns>
        /// <remarks>
        /// Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
        /// </remarks>
        public static <#=d.Name#> Lerp(<#=d.Name#> start, <#=d.Name#> end, <#=d.DT#> amount)
        {
            Lerp(ref start, ref end, amount, out <#=d.Name#> result);
            return result;
        }

        /// <summary>
        /// Performs a cubic interpolation between two colors.
        /// </summary>
        /// <param name="start">Start color.</param>
        /// <param name="end">End color.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        public static void SmoothStep(ref <#=d.Name#> start, ref <#=d.Name#> end, <#=d.DT#> amount, out <#=d.Name#> result)
        {
            amount = MathHelper.SmoothStep(amount);
            Lerp(ref start, ref end, amount, out result);
        }

        /// <summary>
        /// Performs a cubic interpolation between two colors.
        /// </summary>
        /// <param name="start">Start color.</param>
        /// <param name="end">End color.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <returns>The cubic interpolation of the two colors.</returns>
        public static <#=d.Name#> SmoothStep(<#=d.Name#> start, <#=d.Name#> end, <#=d.DT#> amount)
        {
            SmoothStep(ref start, ref end, amount, out <#=d.Name#> result);
            return result;
        }

        /// <summary>
        /// Returns a color containing the smallest components of the specified colors.
        /// </summary>
        /// <param name="left">The first source color.</param>
        /// <param name="right">The second source color.</param>
        /// <param name="result">When the method completes, contains an new color composed of the largest components of the source colors.</param>
        public static void Max(ref <#=d.Name#> left, ref <#=d.Name#> right, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = (left.{field}  > right.{field} ) ? left.{field}  : right.{field} ;");#>
        }

        /// <summary>
        /// Returns a color containing the largest components of the specified colors.
        /// </summary>
        /// <param name="left">The first source color.</param>
        /// <param name="right">The second source color.</param>
        /// <returns>A color containing the largest components of the source colors.</returns>
        public static <#=d.Name#> Max(<#=d.Name#> left, <#=d.Name#> right)
        {
            Max(ref left, ref right, out <#=d.Name#> result);
            return result;
        }

        /// <summary>
        /// Returns a color containing the smallest components of the specified colors.
        /// </summary>
        /// <param name="left">The first source color.</param>
        /// <param name="right">The second source color.</param>
        /// <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        public static void Min(ref <#=d.Name#> left, ref <#=d.Name#> right, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = (left.{field} < right.{field}) ? left.{field} : right.{field};");#>
        }

        /// <summary>
        /// Returns a color containing the smallest components of the specified colors.
        /// </summary>
        /// <param name="left">The first source color.</param>
        /// <param name="right">The second source color.</param>
        /// <returns>A color containing the smallest components of the source colors.</returns>
        public static <#=d.Name#> Min(<#=d.Name#> left, <#=d.Name#> right)
        {
            Min(ref left, ref right, out <#=d.Name#> result);
            return result;
        }

        /// <summary>
        /// Calculates the dot product of two <#=gen.See()#>.
        /// </summary>
        /// <param name="c0">The first <#=gen.See()#>.</param>
        /// <param name="c1">The second <#=gen.See()#>.</param>
        /// <param name="result">The destination for the result.</param>
        /// <returns></returns>
        public static <#=d.DT#> Dot(<#=d.Name#> c0,<#=d.Name#> c1)
        {
            return c0.R * c1.R + c0.G * c1.G + c0.B * c1.B<#=(d.Size > 3 ? " + c0.A * c1.A" : "")#>;
        }

        /// <summary>
        /// Calculates the dot product of two <#=gen.See()#>.
        /// </summary>
        /// <param name="c0">The first <#=gen.See()#>.</param>
        /// <param name="c1">The second <#=gen.See()#>.</param>
        /// <param name="result">The destination for the result.</param>
        /// <returns></returns>
        public static <#=d.DT#> Dot(ref <#=d.Name#> c0, ref <#=d.Name#> c1)
        {
            return c0.R * c1.R + c0.G * c1.G + c0.B * c1.B<#=(d.Size > 3 ? " + c0.A * c1.A" : "")#>;
        }

        /// <summary>
        /// Calculates the dot product of two <#=gen.See()#>.
        /// </summary>
        /// <param name="c0">The first <#=gen.See()#>.</param>
        /// <param name="c1">The second <#=gen.See()#>.</param>
        /// <param name="result">The destination for the result.</param>
        /// <returns></returns>
        public static void Dot(ref <#=d.Name#> c0,ref <#=d.Name#>  c1, out <#=d.DT#> result)
        {
            result = c0.R * c1.R + c0.G * c1.G + c0.B * c1.B<#=(d.Size > 3 ? " + c0.A * c1.A" : "")#>;
        }

        /// <summary>
        /// Adjusts the contrast of a color.
        /// </summary>
        /// <param name="value">The color whose contrast is to be adjusted.</param>
        /// <param name="contrast">The amount by which to adjust the contrast.</param>
        /// <param name="result">When the method completes, contains the adjusted color.</param>
        public static void AdjustContrast(ref <#=d.Name#> value, <#=d.DT#> contrast, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = 0.5{d.DT.Literal} + contrast * (value.{field} - 0.5{d.DT.Literal});");#>
        }

        /// <summary>
        /// Adjusts the contrast of a color.
        /// </summary>
        /// <param name="value">The color whose contrast is to be adjusted.</param>
        /// <param name="contrast">The amount by which to adjust the contrast.</param>
        /// <returns>The adjusted color.</returns>
        public static <#=d.Name#> AdjustContrast(<#=d.Name#> value, <#=d.DT#> contrast)
        {
            return new <#=d.Name#>(
<#gen.IterateFields((i, field) => $"    0.5{d.DT.Literal} + contrast * (value.{field} - 0.5{d.DT.Literal}){(i < d.Size -1 ? "," : "")}");#>
            );
        }

        /// <summary>
        /// Adjusts the saturation of a color.
        /// </summary>
        /// <param name="value">The color whose saturation is to be adjusted.</param>
        /// <param name="saturation">The amount by which to adjust the saturation.</param>
        /// <param name="result">When the method completes, contains the adjusted color.</param>
        public static void AdjustSaturation(ref <#=d.Name#> value, <#=d.DT#> saturation, out <#=d.Name#> result)
        {
            <#=d.DT#> grey = value.R * 0.2125<#=d.DT.Literal#> + value.G * 0.7154<#=d.DT.Literal#> + value.B * 0.0721<#=d.DT.Literal#>;
<#gen.IterateFields((i, field) => $"result.{field} = grey + saturation * (value.{field}  - grey);");#>
        }

        /// <summary>
        /// Adjusts the saturation of a color.
        /// </summary>
        /// <param name="value">The color whose saturation is to be adjusted.</param>
        /// <param name="saturation">The amount by which to adjust the saturation.</param>
        /// <returns>The adjusted color.</returns>
        public static <#=d.Name#> AdjustSaturation(<#=d.Name#> value, <#=d.DT#> saturation)
        {
            <#=d.DT#> grey = value.R * 0.2125<#=d.DT.Literal#> + value.G * 0.7154<#=d.DT.Literal#> + value.B * 0.0721<#=d.DT.Literal#>;

            return new <#=d.Name#>(
<#gen.IterateFields((i, field) => $"    grey + saturation * (value.{field} - grey){(i < d.Size -1 ? "," : "")}");#>
            );
        }

        /// <summary>
        /// Computes the premultiplied value of the provided color.
        /// </summary>
        /// <param name="value">The non-premultiplied value.</param>
        /// <param name="alpha">The color alpha.</param>
        /// <param name="result">The premultiplied result.</param>
        public static void Premultiply(ref <#=d.Name#> value, <#=d.DT#> alpha, out <#=d.Name#> result)
        {
<#gen.IterateFields((i, field) => $"result.{field} = value.{field} * alpha;");#>
        }

        /// <summary>
        /// Computes the premultiplied value of the provided color.
        /// </summary>
        /// <param name="value">The non-premultiplied value.</param>
        /// <param name="alpha">The color alpha.</param>
        /// <returns>The premultiplied color.</returns>
        public static <#=d.Name#> Premultiply(<#=d.Name#> value, <#=d.DT#> alpha)
        {
            Premultiply(ref value, alpha, out <#=d.Name#> result);
            return result;
        }

        /// <summary>
        /// Assert a color (return it unchanged).
        /// </summary>
        /// <param name="value">The color to assert (unchanged).</param>
        /// <returns>The asserted (unchanged) color.</returns>
        public static <#=d.Name#> operator +(<#=d.Name#> value)
        {
            return value;
        }


        /// <summary>
        /// Negates a color.
        /// </summary>
        /// <param name="value">The color to negate.</param>
        /// <returns>A negated color.</returns>
        public static <#=d.Name#> operator -(<#=d.Name#> value)
        {
            return new <#=d.Name#>(<#=gen.FieldsToArgs(d.FieldNames, "-value.")#>);
        }

        /// <summary>
        /// Tests for equality between two objects.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The second value to compare.</param>
        /// <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(<#=d.Name#> left, <#=d.Name#> right)
        {
            return left.Equals(ref right);
        }

        /// <summary>
        /// Tests for inequality between two objects.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The second value to compare.</param>
        /// <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(<#=d.Name#> left, <#=d.Name#> right)
        {
            return !left.Equals(ref right);
        }

<#gen.GenerateCasts((other) => other.DT.One);#>
        /// <summary>
        /// Performs an implicit conversion from <#=gen.See()#> to <#=gen.See(vectorName)#>.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator <#=vectorName#>(<#=d.Name#> value)
        {
            return new <#=vectorName#>(<#=gen.FieldsToArgs(d.FieldNames, "value.")#>);
        }

        /// <summary>
        /// Performs an implicit conversion from <#=vectorName#> to <#=gen.See()#>.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static implicit operator <#=d.Name#>(<#=vectorName#> value)
        {
            return new <#=d.Name#>(<#=gen.FieldsToArgs(vecFieldNames, "value.")#>);
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.Int32"/> to <#=gen.See()#>.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The result of the conversion.</returns>
        public static explicit operator <#=d.Name#>(int value)
        {
            return new <#=d.Name#>(value);
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return ToString(CultureInfo.CurrentCulture);
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <param name="format">The format to apply to each channel element (<#=d.DT#>)</param>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentCulture);
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public string ToString(IFormatProvider formatProvider)
        {
            return string.Format(formatProvider, toStringFormat, <#=gen.FieldsToArgs(d.FieldNames)#>);
        }

        /// <summary>
        /// Returns a <see cref="string"/> that represents this instance.
        /// </summary>
        /// <param name="format">The format to apply to each channel element (<#=d.DT#>).</param>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="string"/> that represents this instance.
        /// </returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (format == null)
                return ToString(formatProvider);

            return string.Format(formatProvider,
                toStringFormat,
<#gen.IterateFields((i, field) => $"\t{field}.ToString(format, formatProvider){(i < d.Size - 1 ? "," : "" )}", 0);#>
            );
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>
        /// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
        /// </returns>
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = R.GetHashCode();
<#gen.IterateFields((i, field) => $"\thashCode = (hashCode * 397) ^ {field}.GetHashCode();", 1);#>
                return hashCode;
            }
        }

        /// <summary>
        /// Determines whether the specified <#=gen.See()#> is equal to this instance.
        /// </summary>
        /// <param name="other">The <#=gen.See()#> to compare with this instance.</param>
        /// <returns>
        /// <c>true</c> if the specified <#=gen.See()#> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(ref <#=d.Name#> other)
        {
            return R == other.R && G == other.G && B == other.B<#=(d.Size > 3 ? " && A == other.A" : "")#>;
        }

        /// <summary>
        /// Determines whether the specified <#=gen.See()#> is equal to this instance.
        /// </summary>
        /// <param name="other">The <#=gen.See()#> to compare with this instance.</param>
        /// <returns>
        /// <c>true</c> if the specified <#=gen.See()#> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(<#=d.Name#> other)
        {
            return Equals(ref other);
        }

        /// <summary>
        /// Determines whether the specified <see cref="System.Object"/> is equal to this instance.
        /// </summary>
        /// <param name="value">The <see cref="System.Object"/> to compare with this instance.</param>
        /// <returns>
        /// <c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        public override bool Equals(object value)
        {
            if (!(value is <#=d.Name#>))
                return false;

            var strongValue = (<#=d.Name#>)value;
            return Equals(ref strongValue);
        }


        /// <summary>
        /// Returns a new <#=gen.See()#> with the values of the provided color's components assigned based on their index.<para/>
        /// For example, a swizzle input of (2,2,3) on a <#=gen.See()#> with RGBA values of 100,20,255, will return a <see cref="Color4"/> with values 20,20,255.
        /// </summary>
        /// <param name="col">The color to use as a source for values.</param>
<#gen.IterateFields((i, field) => $"/// <param name=\"{d.ArgNames[i]}Index\">The component index of the source color to use for the new {d.FieldLabels[i]} value. This should be a value between 0 and {d.Size - 1}.</param>");#>
        /// <returns></returns>
        public static unsafe <#=d.Name#> Swizzle(<#=d.Name#> col, <#=gen.FieldsToArgs(d.ArgNames, "int ", "Index")#>)
        {
            return new <#=d.Name#>()
            {
<#gen.IterateFields((i, field) => $"\t{field} = *(&col.{field} + ({d.ArgNames[i]}Index * sizeof({d.DT}))),");#>
            };
        }
    }
}
<#
});
#>