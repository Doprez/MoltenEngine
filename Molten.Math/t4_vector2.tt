<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
TypeGenerator gen = new TypeGenerator(this.GenerationEnvironment, this.Host, "def_vectors.json", "v2");

gen.Generate((d) => d.GetDimension(0) == 2, (d, def) =>
{
    int size = d.GetDimension(0);
#>
namespace Molten<#=d.SubNamespace#>;

///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=size#> components.</summary>
public partial struct <#=d.Name#>
{
#region Static Methods
    /// <summary>
    /// Calculates the cross product of two vectors.
    /// </summary>
    /// <param name="left">First source vector.</param>
    /// <param name="right">Second source vector.</param>
    public static <#=d.DT#> Cross(ref <#=d.Name#> left, ref <#=d.Name#> right)
    {
        return <#=d.DT.TypeCast#>((left.X * right.Y) - (left.Y * right.X));
    }

    /// <summary>
    /// Calculates the cross product of two vectors.
    /// </summary>
    /// <param name="left">First source vector.</param>
    /// <param name="right">Second source vector.</param>
    public static <#=d.DT#> Cross(<#=d.Name#> left, <#=d.Name#> right)
    {
        return <#=d.DT.TypeCast#>((left.X * right.Y) - (left.Y * right.X));
    }
#endregion
}
<#
});
#>
