<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string pMap = "xyzw";
string pMapUpper = "XYZW";

GenerateTypes(this.GenerationEnvironment, this.Host, "Vectors", "vector_defs.json", "v2", _vectorSizes, (d,md) => md.Size == 2, (d, md, defs) =>
{
#>
namespace Molten<#=md.SubNamespace#>
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=md.Size#> components.</summary>
	public partial struct <#=md.Name#>
	{
#region Static Methods
        /// <summary>
        /// Calculates the cross product of two vectors.
        /// </summary>
        /// <param name="left">First source vector.</param>
        /// <param name="right">Second source vector.</param>
        public static <#=d.DT#> Cross(ref <#=md.Name#> left, ref <#=md.Name#> right)
        {
            return <#=md.TypeCast#>((left.X * right.Y) - (left.Y * right.X));
        }

        /// <summary>
        /// Calculates the cross product of two vectors.
        /// </summary>
        /// <param name="left">First source vector.</param>
        /// <param name="right">Second source vector.</param>
        public static <#=d.DT#> Cross(<#=md.Name#> left, <#=md.Name#> right)
        {
            return <#=md.TypeCast#>((left.X * right.Y) - (left.Y * right.X));
        }
#endregion
	}
}
<#
});
#>
