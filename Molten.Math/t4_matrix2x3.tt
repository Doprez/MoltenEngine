<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#
TypeGenerator gen = new TypeGenerator(this.GenerationEnvironment, this.Host, "def_matrices.json", "m2x3");

gen.Generate((d) => d.GetDimension(0) == 2 && d.GetDimension(1) == 3, (d, def) =>
{
    int rowCount = d.GetDimension(0);
    int colCount = d.GetDimension(1);

    string baseVectorName = $"Vector2{d.DT.Literal}";    
    string rowVectorName = $"Vector{colCount}{d.DT.Literal}";
    string colVectorName = $"Vector{rowCount}{d.DT.Literal}";
    string vectorName = $"Vector2{d.DT.Literal}";
    string mat4Name = $"Matrix4{d.DT.Literal}";
    string mat3x2Name = $"Matrix3x2{d.DT.Literal}";
#>
namespace Molten<#=d.SubNamespace#>;

public partial struct <#=d.Name#>
{
    /// <summary>
    /// Multiplies the two matrices.
    /// </summary>
    /// <param name="a">First matrix to multiply.</param>
    /// <param name="b">Second matrix to multiply.</param>
    /// <param name="result">Product of the multiplication.</param>
    public static void Multiply(ref <#=d.Name#> a, ref Matrix4<#=d.DT.Literal#> b, out <#=d.Name#> result)
    {
        <#=d.DT#> resultM11 = a.M11 * b.M11 + a.M12 * b.M21 + a.M13 * b.M31;
        <#=d.DT#> resultM12 = a.M11 * b.M12 + a.M12 * b.M22 + a.M13 * b.M32;
        <#=d.DT#> resultM13 = a.M11 * b.M13 + a.M12 * b.M23 + a.M13 * b.M33;

        <#=d.DT#> resultM21 = a.M21 * b.M11 + a.M22 * b.M21 + a.M23 * b.M31;
        <#=d.DT#> resultM22 = a.M21 * b.M12 + a.M22 * b.M22 + a.M23 * b.M32;
        <#=d.DT#> resultM23 = a.M21 * b.M13 + a.M22 * b.M23 + a.M23 * b.M33;

        result.M11 = resultM11;
        result.M12 = resultM12;
        result.M13 = resultM13;

        result.M21 = resultM21;
        result.M22 = resultM22;
        result.M23 = resultM23;
    }

    /// <summary>
    /// Transforms the vector by the matrix.
    /// </summary>
    /// <param name="v">Vector2 to transform. Considered to be a row vector for purposes of multiplication.</param>
    /// <param name="matrix">Matrix to use as the transformation.</param>
    /// <param name="result">Row vector product of the transformation.</param>
    public static void Transform(ref <#=colVectorName#> v, ref <#=d.Name#> matrix, out <#=rowVectorName#> result)
    {
#if !WINDOWS
        result = new <#=rowVectorName#>();
#endif
        result.X = v.X * matrix.M11 + v.Y * matrix.M21;
        result.Y = v.X * matrix.M12 + v.Y * matrix.M22;
        result.Z = v.X * matrix.M13 + v.Y * matrix.M23;
    }

    /// <summary>
    /// Transforms the vector by the matrix.
    /// </summary>
    /// <param name="v">Vector2 to transform. Considered to be a column vector for purposes of multiplication.</param>
    /// <param name="matrix">Matrix to use as the transformation.</param>
    /// <param name="result">Column vector product of the transformation.</param>
    public static void Transform(ref <#=rowVectorName#> v, ref <#=d.Name#> matrix, out <#=colVectorName#> result)
    {
#if !WINDOWS
        result = <#=colVectorName#>();
#endif
        result.X = matrix.M11 * v.X + matrix.M12 * v.Y + matrix.M13 * v.Z;
        result.Y = matrix.M21 * v.X + matrix.M22 * v.Y + matrix.M23 * v.Z;
    }
}
<#
});
#>
