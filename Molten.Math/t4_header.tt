<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".cs" #>

<#+
public delegate void GenerateTypeCallback(TypeDef d, GeneratorDefinition def);
public delegate bool GenerateTypeFilter(TypeDef d);

public class GeneratorDefinition
{
    public string[] FieldNames;

    public string[] FieldLabels;

    public string[] ArgNames;

    public string SubFolder;

    public List<TypeDef> Types;

    public string[] SizeNames = new string[]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight"};
}


public class DataType
{
    // Populated by deserialization
    public string Name;
    public string TypeName;
    public string Literal;
    public string FPDataType;

    // Populated after deserialization
    public Type UnderlyingType;
    public DataType FP;
    public int Bits;
    public int Pack;
    public string One;
    public string Zero;
    public bool IsFPType;
    public bool IsUnsigned;
    public string FPCast;
    public string Math; //Which math class to use. Math or MathF.
    public string TypeCast;
    public string FPToTypeCast;
    public string IntType;

    public override string ToString()
    {
        return Name;
    }

    public static bool operator ==(DataType dt, string str){
        return dt?.Name == str;
    }

    public static bool operator !=(DataType dt, string str){
        return dt?.Name != str;
    }

    public static bool operator ==(string str, DataType dt){
        return str != dt?.Name;
    }

    public static bool operator !=(string str, DataType dt){
        return str != dt?.Name;
    }
}

public class TypeDef
{
    public string DefName;              // Name
    public string Postfix;              // Name post-fix
    public string DataTypeName;         // The name of the DataType to be used.
    public int[] Sizes = new int[]{1};  // The different sizes of this type that need to be defined, if any.

    public DataType FP => DT.FP;
    public DataType DT;                 // The underlying DataType definition.

    // Parameters of the current type to be generated
    public int Size;
	public string Name;
	public string Filename;
    public string SubNamespace;
    public string OutputPath;

    public string GetName(int size) => DefName.Replace("{size}", size.ToString());
}

public class TypeGenerator
{
    StringBuilder _sb;
    ITextTemplatingEngineHost _host;
    string _outputPath;
    string _filePostfix;
    TypeDef _curDef;

    GeneratorDefinition _def;
    List<DataType> _supportedDataTypes;
    Dictionary<string, DataType> _dataTypes;

    public TypeGenerator(StringBuilder genEnvironment, ITextTemplatingEngineHost host, string typeDefFileName, string filePostfix = "")
    {
        _sb = genEnvironment;
        _host = host;
        _outputPath = _host.ResolvePath("");

        if(!string.IsNullOrWhiteSpace(filePostfix))
            _filePostfix = $".{filePostfix}";
        else
            _filePostfix = "";

        _supportedDataTypes = ReadJsonDef<DataType>(_outputPath, "def_datatypes.json");
        _dataTypes = new Dictionary<string, DataType>();
        PopulateDataTypes();
        ReadDefinition(typeDefFileName);        
    }

    private void PopulateDataTypes()
    {
        foreach(DataType dt in _supportedDataTypes)
        {
            dt.UnderlyingType = Type.GetType(dt.TypeName);
            if(dt.UnderlyingType == null)
                continue;

            _dataTypes[dt.Name] = dt;

            // Check deserialized values
            dt.Literal = string.IsNullOrWhiteSpace(dt.Literal) ? "" : dt.Literal;

            dt.Pack = Marshal.SizeOf(dt.UnderlyingType);
            dt.Bits = dt.Pack * 8;
            dt.One = string.IsNullOrWhiteSpace(dt.One) ? ("1" + dt.Literal) : dt.One;
            dt.Zero = string.IsNullOrWhiteSpace(dt.Zero) ? ("0" + dt.Literal) : dt.Zero;
            dt.IsFPType = dt.FPDataType == dt.Name;
            dt.IsUnsigned = dt.Name.StartsWith("u") || dt.Name == "byte";
            dt.FPCast = dt.Name == "float" ? "(float)" : (dt.Name == "double" ? "" : $"({dt.Name})");
            dt.Math = dt.Name == "float" ? "MathF" : "Math";
            dt.TypeCast = (dt.Name == "byte" || dt.Name == "sbyte" || dt.Name == "short" || dt.Name == "ushort") ? $"({dt.Name})" : "";
            dt.FPToTypeCast = (dt.TypeCast.Length > 0) ? dt.TypeCast : (dt.Name != dt.FPDataType ? $"({dt.Name})" : "");
            dt.IntType = (dt.Name == "byte" || dt.Name == "sbyte" || dt.Name == "short" || dt.Name == "ushort") ? $"int" : dt.Name;
        }

        // Assign floating point type names.
        foreach(DataType dt in _supportedDataTypes){
            if(dt.FPDataType == dt.Name)
                dt.FP = dt;
            else
                _dataTypes.TryGetValue(dt.FPDataType, out dt.FP);
        }
    }

    private void ReadDefinition(string typeDefFileName)
    {
        string json = File.ReadAllText(Path.Combine(_outputPath, typeDefFileName.Trim()));
        _def = JsonConvert.DeserializeObject<GeneratorDefinition>(json);

        _def.ArgNames = new string[_def.FieldNames.Length];
        for(int i = 0; i < _def.ArgNames.Length; i++)
            _def.ArgNames[i] = _def.FieldNames[i].ToLower();

        foreach(TypeDef t in _def.Types)
        {
            if(!_dataTypes.ContainsKey(t.DataTypeName))
                continue;

            t.DT = _dataTypes[t.DataTypeName];

            switch(t.DT.Bits)
            {
                case 16:
                    t.SubNamespace = ".HalfPrecision"; 
                    t.OutputPath = $"{_outputPath}/HalfPrecision/{_def.SubFolder}";
                    break;

                case 64: 
                    t.SubNamespace = ".DoublePrecision"; 
                    t.OutputPath = $"{_outputPath}/DoublePrecision/{_def.SubFolder}";
                    break;

                case 128: 
                    t.SubNamespace = ".QuadPrecision"; 
                    t.OutputPath = $"{_outputPath}/QuadPrecision/{_def.SubFolder}";
                    break;

                default:
                    t.SubNamespace = "";
                    t.OutputPath = $"{_outputPath}/SinglePrecision/{_def.SubFolder}";
                    break;
            }
        }
    }

    public void Generate(        
        GenerateTypeFilter filter,
        GenerateTypeCallback callback)
    {
        foreach(TypeDef t in _def.Types)
        {
            foreach(int size in t.Sizes)
            {
                t.Size = size;
                _sb.Length = 0;

                if(filter != null && !filter(t))
                    continue;

                string defName = t.DefName.Replace("{size}", size.ToString());
                t.Name = $"{defName}{t.Postfix}";

                _curDef = t;
                callback(t, _def);

		        t.Filename = $"{t.Name}{_filePostfix}";

                SaveFile(t.OutputPath, t.Filename, _sb.ToString());
		        _sb.Length = 0;
            }
        }
    }

    public List<T> ReadJsonDef<T>(string folder, string fileName) where T : class
    {
        string json = File.ReadAllText(Path.Combine(folder, fileName.Trim()));
        return JsonConvert.DeserializeObject<List<T>>(json);
    }

    public void SaveFile(string folder, string fileName, string content)
    {
        string path = Path.Combine(folder, fileName.Trim() + ".cs");
        if(!Directory.Exists(folder))
            Directory.CreateDirectory(folder);

	    using (FileStream fs = new FileStream(path, FileMode.Create))
        {
            using (StreamWriter str = new StreamWriter(fs))
            {
                str.WriteLine(content);
                str.Flush();
            }
        }
    }

    public string GetConstructorArgs()
    {
        if(_def.ArgNames.Length < _curDef.Size)
            throw new Exception("Length of provided argument names list (ArgNames) is shorter than the size of the current type.");
        
        string r = "";
        for(int i = 0; i < _curDef.Size; i++)
        {
            if(i > 0) r += ", ";
                r += $"{_curDef.DT.Name} {_def.ArgNames[i]}";
        }

        return r;
    }

    public string GenerateFields(string name = "", int indentLevel = 2)
    {
        name = string.IsNullOrWhiteSpace(name) ? "component" : name;
        string r = "";
        string indent = indentLevel > 0 ? new string('\t', indentLevel) : "";
        string n = Environment.NewLine;

        for(int i = 0; i < _curDef.Size; i++)
        {
            r += $"{indent}/// <summary>The {_def.FieldLabels[i]} {name}.</summary>{n}";
            r += $"{indent}[DataMember]{n}";
            r += $"{indent}public {_curDef.DT} {_def.FieldNames[i]};{n}{n}";
        }

        return r;
    }

    public string FieldsToArgs(string[] pMap, string prefix = "", string postfix = "", int count = 0, int expectedCount = 0, string defaultValue = ""){
        string r = "";
        int size = Math.Min(pMap.Length, _curDef.Size);
        size = count > 0 ? Math.Min(count, size) : size;
        if(expectedCount > 0)
            size = Math.Min(size, expectedCount);

        prefix = string.IsNullOrWhiteSpace(prefix) ? "" : $"{prefix}";
        postfix = string.IsNullOrWhiteSpace(postfix) ? "" : $"{postfix}";

        for(int i = 0; i < size; i++)
            r += $"{(i > 0 ? ", " : "")}{prefix}{pMap[i]}{postfix}";

        // If our current type doesn't have enough fields as arguments, populate the rest with the defaultValue string.
        if(!string.IsNullOrWhiteSpace(defaultValue))
        {
            for(int s = size; s < expectedCount; s++)
            {
                if(s > 0)
                    r += ", ";

                r += defaultValue;
            }
        }

        return r;
    }

    private void Out(int indent, string text)
    {
        _sb.AppendLine($"{new string('\t', indent)}{text}");
    }

    private void Out(string text)
    {
        _sb.AppendLine(text);
    }

    private void Indent(int indent)
    {
        _sb.Append(new string('\t', indent));
    }

    private void Append(string text)
    {
        _sb.Append(text);
    }

    public void GenerateStandardConstructors(int indent = 2)
    {
        // Single-value initialization parameter
        Out(indent, $"/// <summary>Initializes a new instance of {See()}.</summary>");
        Out(indent, $"/// <param name=\"value\">The value that will be assigned to all components.</param>");
        Out(indent, $"public {_curDef.Name}({_curDef.DT} value)");
        Out(indent, $"{{");
        for(int i = 0; i < _curDef.Size; i++)
            Out(indent + 1, $"{_def.FieldNames[i]} = value;");
        Out(indent, $"}}");

        // Array-value initialization parameter
        Out(indent, $"/// <summary>Initializes a new instance of {See()} from an array.</summary>");
        Out(indent, $"/// <param name=\"values\">The values to assign to the {FieldsToArgs(_def.FieldNames)} components of the color. This must be an array with at least {_def.SizeNames[_curDef.Size]} elements.</param>");
        Out(indent, $"/// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"values\"/> is <c>null</c>.</exception>");
        Out(indent, $"/// <exception cref=\"ArgumentOutOfRangeException\">Thrown when <paramref name=\"values\"/> contains more or less than four elements.</exception>");
        Out(indent, $"public {_curDef.Name}({_curDef.DT}[] values)");
        Out(indent, $"{{");
        Out(indent + 1, $"if (values == null)");
        Out(indent + 2, $"throw new ArgumentNullException(\"values\");");
        Out(indent + 1, $"if (values.Length < {_curDef.Size})");
        Out(indent + 2, $"throw new ArgumentOutOfRangeException(\"values\", \"There must be at least {_def.SizeNames[_curDef.Size]} input values for {_curDef.Name}.\");");
        Out("");

        for(int i = 0; i < _curDef.Size; i++)
            Out(indent + 1, $"{_def.FieldNames[i]} = values[{i}];");
        Out(indent, $"}}");

        // Span-based initialization parameter
        Out(indent, $"/// <summary>Initializes a new instance of {See()} from a span.</summary>");
        Out(indent, $"/// <param name=\"values\">The values to assign to the {FieldsToArgs(_def.FieldNames)} components of the color. This must be an array with at least {_def.SizeNames[_curDef.Size]} elements.</param>");
        Out(indent, $"/// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"values\"/> is <c>null</c>.</exception>");
        Out(indent, $"/// <exception cref=\"ArgumentOutOfRangeException\">Thrown when <paramref name=\"values\"/> contains more or less than four elements.</exception>");
        Out(indent, $"public {_curDef.Name}(Span<{_curDef.DT}> values)");
        Out(indent, $"{{");
        Out(indent + 1, $"if (values == null)");
        Out(indent + 2, $"throw new ArgumentNullException(\"values\");");
        Out(indent + 1, $"if (values.Length < {_curDef.Size})");
        Out(indent + 2, $"throw new ArgumentOutOfRangeException(\"values\", \"There must be at least {_def.SizeNames[_curDef.Size]} input values for {_curDef.Name}.\");");
        _sb.AppendLine("");

        for(int i = 0; i < _curDef.Size; i++)
            Out(indent + 1, $"{_def.FieldNames[i]} = values[{i}];");
        Out(indent, $"}}");

        // unsafee pointer-based initialization parameter
        Out(indent, $"/// <summary>Initializes a new instance of {See()} from a an unsafe pointer.</summary>");
        Out(indent, $"/// <param name=\"ptrValues\">The values to assign to the {FieldsToArgs(_def.FieldNames)} components of the color.");
        Out(indent, $"/// <para>There must be at least {_def.SizeNames[_curDef.Size]} elements available or undefined behaviour will occur.</para></param>");
        Out(indent, $"/// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"ptrValues\"/> is <c>null</c>.</exception>");
        Out(indent, $"/// <exception cref=\"ArgumentOutOfRangeException\">Thrown when <paramref name=\"ptrValues\"/> contains more or less than four elements.</exception>");
        Out(indent, $"public unsafe {_curDef.Name}({_curDef.DT}* ptrValues)");
        Out(indent, $"{{");
        Out(indent + 1, $"if (ptrValues == null)");
        Out(indent + 2, $"throw new ArgumentNullException(\"ptrValues\");");
        _sb.AppendLine("");

        for(int i = 0; i < _curDef.Size; i++)
            Out(indent + 1, $"{_def.FieldNames[i]} = ptrValues[{i}];");
        Out(indent, $"}}");

        // Per-component initialization parameters
        Out(indent, $"/// <summary>");
        Out(indent, $"/// Initializes a new instance of {See()}.");
        Out(indent, $"/// </summary>");

        for(int i = 0; i < _curDef.Size; i++)
            Out(indent, $"/// <param name=\"{_def.ArgNames[i]}\">The {_def.FieldNames[i]} component.</param>");

        Out(indent, $"public {_curDef.Name}({GetConstructorArgs()})");
        Out(indent, $"{{");
        for(int i = 0; i < _curDef.Size; i++)
            Out(indent + 1, $"{_def.FieldNames[i]} = {_def.ArgNames[i]};");
        Out(indent, $"}}");
    } 

    public void GenerateUpgradeConstructors(int indent = 2)
    {
        foreach(TypeDef other in _def.Types)
        {
            if(other.DT != _curDef.DT)
                continue;

            foreach(int otherSize in other.Sizes)
            {
                if(_curDef.Size > otherSize)
                {
                    string otherName = other.GetName(otherSize);
                    string otherParams = "";
                    for(int vp = otherSize; vp < _curDef.Size; vp++)
                        otherParams += $"{_curDef.DT} {_def.ArgNames[vp]}{(vp < (_curDef.Size-1) ? ", " : "")}";

                    Out(indent, $"///<summary>Creates a new instance of {See()}, using a <see cref=\"{otherName}\"/> to populate the first {_def.SizeNames[otherSize]} components.</summary>");
		            Out(indent, $"public {_curDef.Name}({otherName} vector, {otherParams})");
                    Out(indent, "{");

		            for(int p = 0; p < otherSize; p++)
			            Out(indent+1, $"{_def.FieldNames[p]} = vector.{_def.FieldNames[p]};");

		            for(int p = otherSize; p < _curDef.Size; p++)
			            Out(indent+1, $"{_def.FieldNames[p]} = {_def.ArgNames[p]};");

                    
                    Out(indent, "}");
                    Out("");
                }
            }
        }
    }

    /// Generates cast operators from the current TypeDef to every other TypeDef in the same GeneratorDefinition.
    /// If there are not enough fields in the current TypeDef to populate the args of another type constructor, 
    /// the default value of the other TypeDefs can be retrieved via the otherDefault callback, to be used for population.
    public void GenerateCasts(Func<TypeDef, string> otherDefault = null, string[] argNames = null, int indent = 2)
    {
        argNames = argNames ?? _def.FieldNames;

        foreach(TypeDef other in _def.Types)
        {
            foreach(int otherSize in other.Sizes)
            {
                if(other == _curDef && _curDef.Size == otherSize)
                    continue;

                string otherName = $"{other.GetName(otherSize)}";
                string otherTypeCast = other.DT != _curDef.DT ? $"({other.DT})" : "";
                string defaultValue = "";
                if(otherDefault != null)
                    defaultValue = otherDefault.Invoke(other);
                else
                    defaultValue = $"{otherTypeCast}{_curDef.DT.Zero}";

                string castArgs = FieldsToArgs(argNames, $"{otherTypeCast}value.", "", _curDef.Size, otherSize, defaultValue);

                Out(indent, $"///<summary>Casts a {See()} to a {See(otherName)}.</summary>");
                Out(indent, $"public static explicit operator {otherName}({_curDef.Name} value)");
                Out(indent, "{");
                Out(indent+1, $"return new {otherName}({castArgs});");
                Out(indent, "}");
                Out("");
            }
        }
    }

    public void GenerateOperator(string op, string name, int indent = 2)
    {
        string capName = Capitalize(name);

        Out(indent, $"///<summary>Performs a {name} operation on two {See()}.</summary>");
        Out(indent, $"///<param name=\"a\">The first {See()} to add.</param>");
        Out(indent, $"///<param name=\"b\">The second {See()}to add.</param>");
        Out(indent, $"///<param name=\"result\">Output for the result of the operation.</param>");
        Out(indent, $"public static void {capName}(ref {_curDef.Name} a, ref {_curDef.Name} b, out {_curDef.Name} result)");
        Out(indent, "{");
        for(int i = 0; i < _curDef.Size; i++){
            if(_curDef.DT.IntType != _curDef.DT.ToString())
                Out(indent+1, $"result.{_def.FieldNames[i]} = ({_curDef.DT})(a.{_def.FieldNames[i]} {op} b.{_def.FieldNames[i]});");
            else
                Out(indent+1, $"result.{_def.FieldNames[i]} = a.{_def.FieldNames[i]} {op} b.{_def.FieldNames[i]};");
        }
        Out(indent, "}");
        Out("");

        Out(indent, $"///<summary>Performs a {name} operation on two {See()}.</summary>");
        Out(indent, $"///<param name=\"a\">The first {See()} to add.</param>");
        Out(indent, $"///<param name=\"b\">The second {See()} to add.</param>");
        Out(indent, $"///<returns>The result of the operation.</returns>");
        Out(indent, $"[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        Out(indent, $"public static {_curDef.Name} operator {op}({_curDef.Name} a, {_curDef.Name} b)");
        Out(indent, "{");
        Out(indent+1, $"{capName}(ref a, ref b, out {_curDef.Name} result);");
        Out(indent+1, $"return result;");
        
        Out(indent, "}");
    }

    public string GetParamSentence(string[] pMap, int size, string delimiter = ", ", string finalDelimiter = "", string pPrefix = "", string pPostfix = "")
    {
        string r = "";
        for(int i = 0; i < size; i++)
        {
            r += $"{pPrefix}{pMap[i]}{pPostfix}";
            r += i < (size - 1) ? (i < (size - 2) ? ", " : finalDelimiter) : ""; 
        }

        return r;
    }

    public void IterateFields(Func<int, string, string> callback, int startIndex = 0, int indent = 3)
    {
        for(int i = startIndex; i < _curDef.Size; i++)
            Out(indent, callback?.Invoke(i, _def.FieldNames[i]));
    }

    private string Capitalize(string word)
    {
        if(word.Length > 1)
        {
            char first = char.ToUpper(word[0]);
            return $"{first}{word.Substring(1, word.Length - 1)}";
        }
        else
        {
            return word.ToUpper();
        }
    }

    public string See(string typeName = "")
    {
        if(string.IsNullOrWhiteSpace(typeName))
            typeName = _curDef.Name;

        return $"<see cref=\"{typeName}\"/>";
    }
}
#>
