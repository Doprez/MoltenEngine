<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="../t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
List<TypeData> _def = ReadJsonDef<TypeData>(outputPath, "vector_defs.json");
string _pMap = "xyzw";
string _pMapUpper = "XYZW";
string r = "";

foreach(TypeData d in _def)
{
	foreach(int size in _vectorSizes)
	{
		string fName = $"{d.Name}{size}{d.Postfix}";
		string fn = $"{fName}";
		string fpCast = d.DT == "float" ? "(float)" : "";
#>
using System;
using System.Runtime.InteropServices;
using System.Globalization;

namespace Molten.Math
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=_strSize[size]#> components.</summary>
	[StructLayout(LayoutKind.Sequential, Pack=<#=d.Pack#>)]
	public partial struct <#=fName#> : IFormattable
	{
<#
		for(int p = 0; p < size; p++)
		{
#>
		///<summary>The <#=_pMapUpper[p]#> component.</summary>
		public <#=d.DT#> <#=_pMapUpper[p]#>;

<#
		}
#>

		///<summary>The size of <see cref="<#=fName#>"/>, in bytes.</summary>
		public static readonly int SizeInBytes = Marshal.SizeOf(typeof(<#=fName#>));

		public static <#=fName#> One = new <#=fName#>(<#for(int p = 0; p < size; p++){#><#=d.One#><#=(p < (size-1) ? ", " : "")#><#}#>);

<#
		for(int p = 0; p < size; p++)
		{
#>
		/// <summary>The <#=_pMapUpper[p]#> unit <see cref="<#=fName#>"/>.</summary>
		public static <#=fName#> Unit<#=_pMapUpper[p]#> = new <#=fName#>(<#for(int u = 0; u < size; u++){#><#=(u == p ?d.One : d.Zero)#><#=(u < (size-1) ? ", " : "")#><#}#>);

<#
		}
#>
		/// <summary>Represents a zero'd <#=fName#>.</summary>
		public static <#=fName#> Zero = new <#=fName#>(<#for(int p = 0; p < size; p++){#><#=d.Zero#><#=(p < (size-1) ? ", " : "")#><#}#>);

#region Constructors
		///<summary>Creates a new instance of <see cref = "<#=fName#>"/>.</summary>
		public <#=fName#>(<#=GetConstructorArgs(d.DT, _pMap, size)#>)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMap[p]#>;
<#
		}
#>
		}

		/// <summary>
        /// Initializes a new instance of the <see cref="<#=fName#>"/> struct.
        /// </summary>
        /// <param name="values">The values to assign to the <#=GetParamSentence(_pMapUpper, size, ", ", " and ")#> components of the vector. This must be an array with <#=size#> elements.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        public <#=fName#>(<#=d.DT#>[] values)
        {
            if (values == null)
                throw new ArgumentNullException("values");
            if (values.Length != <#=size#>)
                throw new ArgumentOutOfRangeException("values", "There must be <#=size#> and only <#=size#> input values for <#=fName#>.");

<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = values[<#=p#>];
<#
		}
#>
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="<#=fName#>"/> struct from an unsafe pointer. The pointer should point to an array of <#=_strSize[size]#> elements.
        /// </summary>
		public unsafe <#=fName#>(<#=d.DT#>* ptr)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = ptr[<#=p#>];
<#
		}
#>
		}
#endregion

#region Common Functions
		/// <summary>
        /// Calculates the squared distance between two <#=SeeRef(fName)#> vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector</param>
        /// <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
        /// <remarks>Distance squared is the value before taking the square root. 
        /// Distance squared can often be used in place of distance if relative comparisons are being made. 
        /// For example, consider three points A, B, and C. To determine whether B or C is further from A, 
        /// compare the distance between A and B to the distance between A and C. Calculating the two distances 
        /// involves two square roots, which are computationally expensive. However, using distance squared 
        /// provides the same information and avoids calculating two square roots.
        /// </remarks>
		public static void DistanceSquared(ref <#=fName#> value1, ref <#=fName#> value2, out <#=d.DT#> result)
        {
<#
			r ="";
			for(int p = 0; p < size; p++)
			{
				r+= $"({_pMap[p]} * {_pMap[p]}){(p < (size-1) ? " + " : "")}";
#>
            <#=d.DT#> <#=_pMap[p]#> = value1.<#=_pMapUpper[p]#> - value2.<#=_pMapUpper[p]#>;
<#
			}
#>

            result = <#=r#>;
        }

		/// <summary>
        /// Calculates the squared distance between two <#=SeeRef(fName)#> vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector.</param>
        /// <returns>The squared distance between the two vectors.</returns>
        /// <remarks>Distance squared is the value before taking the square root. 
        /// Distance squared can often be used in place of distance if relative comparisons are being made. 
        /// For example, consider three points A, B, and C. To determine whether B or C is further from A, 
        /// compare the distance between A and B to the distance between A and C. Calculating the two distances 
        /// involves two square roots, which are computationally expensive. However, using distance squared 
        /// provides the same information and avoids calculating two square roots.
        /// </remarks>
		public static <#=d.DT#> DistanceSquared(ref <#=fName#> value1, ref <#=fName#> value2)
        {
<#
			r = "";
			for(int p = 0; p < size; p++)
			{
				r+= $"({_pMap[p]} * {_pMap[p]}){(p < (size-1) ? " + " : "")}";
#>
            <#=d.DT#> <#=_pMap[p]#> = value1.<#=_pMapUpper[p]#> - value2.<#=_pMapUpper[p]#>;
<#
			}
#>

            return <#=r#>;
        }

		/// <summary>
        /// Creates an array containing the elements of the current <see cref="<#=fName#>"/>.
        /// </summary>
        /// <returns>A <#=_strSize[size]#>-element array containing the components of the vector.</returns>
        public <#=d.DT#>[] ToArray()
        {
            return new <#=d.DT#>[] { <#=GetParamSentence(_pMapUpper, size, ", ", ", ")#>};
        }

		/// <summary>
        /// Reverses the direction of the current <#=SeeRef(fName)#>.
        /// </summary>
        /// <returns>A <#=SeeRef(fName)#> facing the opposite direction.</returns>
		public <#=fName#> Negate()
		{
			return new <#=fName#>(<#=GetParamSentence(_pMapUpper, size, ", ", ", ", "-")#>);
		}

		/// <summary>
        /// Performs a linear interpolation between two <#=SeeRef(fName)#>.
        /// </summary>
        /// <param name="start">The start vector.</param>
        /// <param name="end">The end vector.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <remarks>
        /// Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
        /// </remarks>
        public static <#=fName#> Lerp(ref <#=fName#> start, ref <#=fName#> end, <#=d.FP#> amount)
        {
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = (<#=d.DT#>)((1<#=d.FPL#> - amount) * start.<#=_pMapUpper[p]#> + amount * end.<#=_pMapUpper[p]#>),
<#
		}
#>
			};
        }

		/// <summary>
        /// Returns a <#=SeeRef(fName)#> containing the smallest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=SeeRef(fName)#>.</param>
        /// <param name="right">The second source <#=SeeRef(fName)#>.</param>
        /// <returns>A <#=SeeRef(fName)#> containing the smallest components of the source vectors.</returns>
		public static <#=fName#> Min(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = (left.<#=_pMapUpper[p]#> < right.<#=_pMapUpper[p]#>) ? left.<#=_pMapUpper[p]#> : right.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
		}

		/// <summary>
        /// Returns a <#=SeeRef(fName)#> containing the largest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=SeeRef(fName)#>.</param>
        /// <param name="right">The second source <#=SeeRef(fName)#>.</param>
        /// <returns>A <#=SeeRef(fName)#> containing the largest components of the source vectors.</returns>
		public static <#=fName#> Max(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = (left.<#=_pMapUpper[p]#> > right.<#=_pMapUpper[p]#>) ? left.<#=_pMapUpper[p]#> : right.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
		}

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public void Clamp(<#=d.DT#> min, <#=d.DT#> max)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMapUpper[p]#> < min ? min : <#=_pMapUpper[p]#> > max ? max : <#=_pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public void Clamp(<#=fName#> min, <#=fName#> max)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMapUpper[p]#> < min.<#=_pMapUpper[p]#> ? min.<#=_pMapUpper[p]#> : <#=_pMapUpper[p]#> > max.<#=_pMapUpper[p]#> ? max.<#=_pMapUpper[p]#> : <#=_pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>
        /// Calculates the dot product of two <#=SeeRef(fName)#> vectors.
        /// </summary>
        /// <param name="left">First <#=SeeRef(fName)#> source vector</param>
        /// <param name="right">Second <#=SeeRef(fName)#> source vector.</param>
        /// <param name="result">When the method completes, contains the dot product of the two <#=SeeRef(fName)#> vectors.</param>
        public static <#=d.DT#> Dot(<#=fName#> left, <#=fName#> right)
        {
			return <#for(int p = 0; p < size; p++){#>(left.<#=_pMapUpper[p]#> * right.<#=_pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>;
        }

		/// <summary>
        /// Performs a Hermite spline interpolation.
        /// </summary>
        /// <param name="value1">First source position <#=SeeRef(fName)#> vector.</param>
        /// <param name="tangent1">First source tangent <#=SeeRef(fName)#> vector.</param>
        /// <param name="value2">Second source position <#=SeeRef(fName)#> vector.</param>
        /// <param name="tangent2">Second source tangent <#=SeeRef(fName)#> vector.</param>
        /// <param name="amount">Weighting factor.</param>
        public static <#=fName#> Hermite(ref <#=fName#> value1, ref <#=fName#> tangent1, ref <#=fName#> value2, ref <#=fName#> tangent2, <#=d.DT#> amount)
        {
            <#=d.FP#> squared = amount * amount;
            <#=d.FP#> cubed = amount * squared;
            <#=d.FP#> part1 = ((2.0<#=d.FPL#> * cubed) - (3.0<#=d.FPL#> * squared)) + 1.0<#=d.FPL#>;
            <#=d.FP#> part2 = (-2.0<#=d.FPL#> * cubed) + (3.0<#=d.FPL#> * squared);
            <#=d.FP#> part3 = (cubed - (2.0<#=d.FPL#> * squared)) + amount;
            <#=d.FP#> part4 = cubed - squared;

			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
			if(d.DT == d.FP)
			{
#>
				<#=_pMapUpper[p]#> = (((value1.<#=_pMapUpper[p]#> * part1) + (value2.<#=_pMapUpper[p]#> * part2)) + (tangent1.<#=_pMapUpper[p]#> * part3)) + (tangent2.<#=_pMapUpper[p]#> * part4),
<#
			}
			else
			{
#>
				<#=_pMapUpper[p]#> = (<#=d.DT#>)((((value1.<#=_pMapUpper[p]#> * part1) + (value2.<#=_pMapUpper[p]#> * part2)) + (tangent1.<#=_pMapUpper[p]#> * part3)) + (tangent2.<#=_pMapUpper[p]#> * part4)),
<#
			}
		}
#>
			};
        }

		/// <summary>
        /// Returns a <#=SeeRef(fName)#> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
        /// </summary>
        /// <param name="value1">A <#=SeeRef(fName)#> containing the <#=size#>D Cartesian coordinates of vertex 1 of the triangle.</param>
        /// <param name="value2">A <#=SeeRef(fName)#> containing the <#=size#>D Cartesian coordinates of vertex 2 of the triangle.</param>
        /// <param name="value3">A <#=SeeRef(fName)#> containing the <#=size#>D Cartesian coordinates of vertex 3 of the triangle.</param>
        /// <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
        /// <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
        public static <#=fName#> Barycentric(ref <#=fName#> value1, ref <#=fName#> value2, ref <#=fName#> value3, <#=d.DT#> amount1, <#=d.DT#> amount2)
        {
			return new <#=fName#>(
<#
		for(int p = 0; p < size; p++)
		{
#>
				(value1.<#=_pMapUpper[p]#> + (amount1 * (value2.<#=_pMapUpper[p]#> - value1.<#=_pMapUpper[p]#>))) + (amount2 * (value3.<#=_pMapUpper[p]#> - value1.<#=_pMapUpper[p]#>))<#=(p < (size -1) ? ", " : "")#>
<#
		}
#>
			);
        }
#endregion

#region To-String
<#
		string strFormat = "";
		for(int fmt = 0; fmt < size; fmt++)
			strFormat += $"{_pMapUpper[fmt]}:{("{"+fmt+"}")}{(fmt < (size-1) ? " " : "")}";
#>

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </summary>
        /// <param name="format">The format.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </returns>
        public string ToString(string format)
        {
            if (format == null)
                return ToString();

            return string.Format(CultureInfo.CurrentCulture, "<#=strFormat#>", 
			<#=GetParamSentence(_pMapUpper, size, ", ", ", ", "", ".ToString(format, CultureInfo.CurrentCulture)")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </summary>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </returns>
        public string ToString(IFormatProvider formatProvider)
        {
            return string.Format(formatProvider, "<#=strFormat#>", <#=GetParamSentence(_pMapUpper, size, ", ", ", ")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </returns>
        public override string ToString()
        {
            return string.Format(CultureInfo.CurrentCulture, "<#=strFormat#>", <#=GetParamSentence(_pMapUpper, size, ", ", ", ")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fName)#>.
        /// </returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (format == null)
                return ToString(formatProvider);

            return string.Format(formatProvider, "<#=strFormat#>", <#=GetParamSentence(_pMapUpper, size, ", ", ", ", "", ".ToString(format, formatProvider)")#>);
        }
#endregion

#region Add operators
		public static <#=fName#> operator +(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> + right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fName#> operator +(<#=fName#> left, <#=d.DT#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> + right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		/// <summary>
        /// Assert a <#=SeeRef(fName)#> (return it unchanged).
        /// </summary>
        /// <param name="value">The <#=SeeRef(fName)#> to assert (unchanged).</param>
        /// <returns>The asserted (unchanged) <#=SeeRef(fName)#>.</returns>
        public static <#=fName#> operator +(<#=fName#> value)
        {
            return value;
        }
#endregion

#region Subtract operators
		public static <#=fName#> operator -(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> - right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fName#> operator -(<#=fName#> left, <#=d.DT#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> - right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		/// <summary>
        /// Negate/reverse the direction of a <#=SeeRef(fName)#>.
        /// </summary>
        /// <param name="value">The <#=SeeRef(fName)#> to reverse.</param>
        /// <returns>The reversed <#=SeeRef(fName)#>.</returns>
        public static <#=fName#> operator -(<#=fName#> value)
        {
            return new <#=fName#>(<#=GetParamSentence(_pMapUpper, size, ", ", ", ", "-value.")#>);
        }
#endregion

#region division operators
		public static <#=fName#> operator /(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> / right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fName#> operator /(<#=fName#> left, <#=d.DT#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> / right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}
#endregion

#region Multiply operators
		public static <#=fName#> operator *(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> * right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fName#> operator *(<#=fName#> left, <#=d.DT#> right)
		{
			return new <#=fName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> * right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}
#endregion

#region Properties

#endregion

#region Static Methods
		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=SeeRef(fName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static <#=fName#> Clamp(<#=fName#> value, <#=d.DT#> min, <#=d.DT#> max)
        {
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = value.<#=_pMapUpper[p]#> < min ? min : value.<#=_pMapUpper[p]#> > max ? max : value.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=SeeRef(fName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static <#=fName#> Clamp(<#=fName#> value, <#=fName#> min, <#=fName#> max)
        {
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = value.<#=_pMapUpper[p]#> < min.<#=_pMapUpper[p]#> ? min.<#=_pMapUpper[p]#> : value.<#=_pMapUpper[p]#> > max.<#=_pMapUpper[p]#> ? max.<#=_pMapUpper[p]#> : value.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
        }
#endregion

#region Indexers
		/// <summary>
        /// Gets or sets the component at the specified index.
        /// </summary>
        /// <value>The value of the <#=GetParamSentence(_pMapUpper, size, ",", " or ")#> component, depending on the index.</value>
        /// <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component and so on.</param>
        /// <returns>The value of the component at the specified index.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, <#=(size-1)#>].</exception>
        
		public <#=d.DT#> this[int index]
		{
			get
			{
				switch(index)
				{
<#
					for(int p = 0; p < size; p++)
					{
#>
					case <#=p#>: return <#=_pMapUpper[p]#>;
<#
					}
#>
				}
				throw new ArgumentOutOfRangeException("index", "Indices for <#=fName#> run from 0 to <#=(size-1)#>, inclusive.");
			}

			set
			{
				switch(index)
				{
<#
					for(int p = 0; p < size; p++)
					{
#>
					case <#=p#>: <#=_pMapUpper[p]#> = value; break;
<#
					}
#>
				}
				throw new ArgumentOutOfRangeException("index", "Indices for <#=fName#> run from 0 to <#=(size-1)#>, inclusive.");
			}
		}
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
