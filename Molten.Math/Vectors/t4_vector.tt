<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_helpers.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
string[] _types = new string[]{"sbyte", "byte", "int", "uint", "short", "ushort", "long", "ulong", "float", "double", "decimal", "nint", "nuint"};
string[] _names = new string[]{"SByte", "Byte", "Vector", "Vector", "Half", "Half", "Vector", "Vector", "Vector", "Vector", "Vector", "Vector", "Vector"};
string[] _postfixes = new string[]{"", "", "I", "UI", "", "U", "L", "UL", "F", "D", "M", "N", "NU"};
int[] _pack = new int[]{1, 1, 4, 4 , 2, 2, 8, 8, 4, 8, 16, 0, 0};
string[] _one = new string[]{"1", "1", "1", "1U", "(short)1", "(ushort)1", "1L", "1UL", "1F", "1D", "1M", "1", "1U"};
string[] _zero = new string[]{"0", "0", "0", "0U", "0", "0", "0L", "0UL", "0F", "0D", "0M", "0", "0U"};
string[] _strSize = new string[]{"zero", "one", "two", "three", "four", "five", "six"};
string _pMap = "xyzw";
string _pMapUpper = "XYZW";
string r = "";

int[] _sizes = new int[]{2, 3, 4};

for(int i = 0; i < _types.Length; i++)
{
	string tName = _types[i];

	foreach(int size in _sizes)
	{
		string fullName = $"{_names[i]}{size}{_postfixes[i]}";
		string fn = $"{fullName}";
#>
using System;
using System.Runtime.InteropServices;
using System.Globalization;

namespace Molten.Math
{
	///<summary>A <see cref = "<#=_types[i]#>"/> vector comprised of <#=_strSize[size]#> components.</summary>
	[StructLayout(LayoutKind.Sequential, Pack=<#=_pack[i]#>)]
	public partial struct <#=fullName#>
	{
<#
		for(int p = 0; p < size; p++)
		{
#>
		///<summary>The <#=_pMapUpper[p]#> component.</summary>
		public <#=_types[i]#> <#=_pMapUpper[p]#>;

<#
		}
#>

		///<summary>The size of <see cref="<#=fullName#>"/>, in bytes.</summary>
		public static readonly int SizeInBytes = Marshal.SizeOf(typeof(<#=fullName#>));

		public static <#=fullName#> One = new <#=fullName#>(<#for(int p = 0; p < size; p++){#><#=_one[i]#><#=(p < (size-1) ? ", " : "")#><#}#>);

<#
		for(int p = 0; p < size; p++)
		{
#>
		/// <summary>
        /// The <#=_pMapUpper[p]#> unit <see cref="<#=fullName#>"/>.
        /// </summary>
		public static <#=fullName#> Unit<#=_pMapUpper[p]#> = new <#=fullName#>(<#for(int u = 0; u < size; u++){#><#=(u == p ?_one[i] : _zero[i])#><#=(u < (size-1) ? ", " : "")#><#}#>);

<#
		}
#>
		public static <#=fullName#> Zero = new <#=fullName#>(<#for(int p = 0; p < size; p++){#><#=_zero[i]#><#=(p < (size-1) ? ", " : "")#><#}#>);

#region Constructors
		///<summary>Creates a new instance of <see cref = "<#=fullName#>"/>.</summary>
		public <#=fullName#>(<#=GetConstructorArgs(tName, _pMap, size)#>)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMap[p]#>;
<#
		}
#>
		}

		/// <summary>
        /// Initializes a new instance of the <see cref="<#=fullName#>"/> struct.
        /// </summary>
        /// <param name="values">The values to assign to the <#=GetParamSentence(_pMapUpper, size, ", ", " and ")#> components of the vector. This must be an array with <#=size#> elements.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        public <#=fullName#>(<#=_types[i]#>[] values)
        {
            if (values == null)
                throw new ArgumentNullException("values");
            if (values.Length != <#=size#>)
                throw new ArgumentOutOfRangeException("values", "There must be <#=size#> and only <#=size#> input values for <#=fullName#>.");

<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = values[<#=p#>];
<#
		}
#>
        }

		public unsafe <#=fullName#>(<#=_types[i]#>* ptr)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = ptr[<#=p#>];
<#
		}
#>
		}
#endregion

#region Common Functions
		/// <summary>
        /// Calculates the squared distance between two <#=SeeRef(fullName)#> vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector</param>
        /// <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
        /// <remarks>Distance squared is the value before taking the square root. 
        /// Distance squared can often be used in place of distance if relative comparisons are being made. 
        /// For example, consider three points A, B, and C. To determine whether B or C is further from A, 
        /// compare the distance between A and B to the distance between A and C. Calculating the two distances 
        /// involves two square roots, which are computationally expensive. However, using distance squared 
        /// provides the same information and avoids calculating two square roots.
        /// </remarks>
		public static void DistanceSquared(ref <#=fullName#> value1, ref <#=fullName#> value2, out <#=_types[i]#> result)
        {
<#
			r ="";
			for(int d = 0; d < size; d++)
			{
				r+= $"({_pMap[d]} * {_pMap[d]}){(d < (size-1) ? " + " : "")}";
#>
            <#=_types[i]#> <#=_pMap[d]#> = value1.<#=_pMapUpper[d]#> - value2.<#=_pMapUpper[d]#>;
<#
			}
#>

            result = <#=r#>;
        }

		/// <summary>
        /// Calculates the squared distance between two <#=SeeRef(fullName)#> vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector.</param>
        /// <returns>The squared distance between the two vectors.</returns>
        /// <remarks>Distance squared is the value before taking the square root. 
        /// Distance squared can often be used in place of distance if relative comparisons are being made. 
        /// For example, consider three points A, B, and C. To determine whether B or C is further from A, 
        /// compare the distance between A and B to the distance between A and C. Calculating the two distances 
        /// involves two square roots, which are computationally expensive. However, using distance squared 
        /// provides the same information and avoids calculating two square roots.
        /// </remarks>
		public static <#=_types[i]#> DistanceSquared(ref <#=fullName#> value1, ref <#=fullName#> value2)
        {
<#
			r = "";
			for(int d = 0; d < size; d++)
			{
				r+= $"({_pMap[d]} * {_pMap[d]}){(d < (size-1) ? " + " : "")}";
#>
            <#=_types[i]#> <#=_pMap[d]#> = value1.<#=_pMapUpper[d]#> - value2.<#=_pMapUpper[d]#>;
<#
			}
#>

            return <#=r#>;
        }

		/// <summary>
        /// Creates an array containing the elements of the current <see cref="<#=fullName#>"/>.
        /// </summary>
        /// <returns>A <#=_strSize[size]#>-element array containing the components of the vector.</returns>
        public <#=_types[i]#>[] ToArray()
        {
            return new <#=_types[i]#>[] { <#=GetParamSentence(_pMapUpper, size, ", ", ", ")#>};
        }

		/// <summary>
        /// Reverses the direction of the current <#=SeeRef(fullName)#>.
        /// </summary>
        /// <returns>A <#=SeeRef(fullName)#> facing the opposite direction.</returns>
		public <#=fullName#> Negate()
		{
			return new <#=fullName#>(<#=GetParamSentence(_pMapUpper, size, ", ", ", ", "-")#>);
		}

		/// <summary>
        /// Performs a linear interpolation between two <#=SeeRef(fullName)#>.
        /// </summary>
        /// <param name="start">The start vector.</param>
        /// <param name="end">The end vector.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        /// <remarks>
        /// Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
        /// </remarks>
        public static <#=fullName#> Lerp(ref <#=fullName#> start, ref <#=fullName#> end, float amount)
        {
			return new <#=fullName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = (<#=_types[i]#>)((1f - amount) * start.<#=_pMapUpper[p]#> + amount * end.<#=_pMapUpper[p]#>),
<#
		}
#>
			};
        }

		/// <summary>
        /// Returns a <#=SeeRef(fullName)#> containing the smallest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=SeeRef(fullName)#>.</param>
        /// <param name="right">The second source <#=SeeRef(fullName)#>.</param>
        /// <returns>A <#=SeeRef(fullName)#> containing the smallest components of the source vectors.</returns>
		public static <#=fullName#> Min(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = (left.<#=_pMapUpper[p]#> < right.<#=_pMapUpper[p]#>) ? left.<#=_pMapUpper[p]#> : right.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
		}

		/// <summary>
        /// Returns a <#=SeeRef(fullName)#> containing the largest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=SeeRef(fullName)#>.</param>
        /// <param name="right">The second source <#=SeeRef(fullName)#>.</param>
        /// <returns>A <#=SeeRef(fullName)#> containing the largest components of the source vectors.</returns>
		public static <#=fullName#> Max(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = (left.<#=_pMapUpper[p]#> > right.<#=_pMapUpper[p]#>) ? left.<#=_pMapUpper[p]#> : right.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
		}

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public void Clamp(<#=_types[i]#> min, <#=_types[i]#> max)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMapUpper[p]#> < min ? min : <#=_pMapUpper[p]#> > max ? max : <#=_pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public void Clamp(<#=fullName#> min, <#=fullName#> max)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMapUpper[p]#> < min.<#=_pMapUpper[p]#> ? min.<#=_pMapUpper[p]#> : <#=_pMapUpper[p]#> > max.<#=_pMapUpper[p]#> ? max.<#=_pMapUpper[p]#> : <#=_pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>
        /// Calculates the dot product of two <#=SeeRef(fullName)#> vectors.
        /// </summary>
        /// <param name="left">First <#=SeeRef(fullName)#> source vector</param>
        /// <param name="right">Second <#=SeeRef(fullName)#> source vector.</param>
        /// <param name="result">When the method completes, contains the dot product of the two <#=SeeRef(fullName)#> vectors.</param>
        public static <#=_types[i]#> Dot(<#=fullName#> left, <#=fullName#> right)
        {
			return <#for(int p = 0; p < size; p++){#>(left.<#=_pMapUpper[p]#> * right.<#=_pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>;
        }
#endregion

#region To-String
<#
		string strFormat = "";
		for(int fmt = 0; fmt < size; fmt++)
			strFormat += $"{_pMapUpper[fmt]}:{("{"+fmt+"}")}{(fmt < (size-1) ? " " : "")}";
#>

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </summary>
        /// <param name="format">The format.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </returns>
        public string ToString(string format)
        {
            if (format == null)
                return ToString();

            return string.Format(CultureInfo.CurrentCulture, "<#=strFormat#>", 
			<#=GetParamSentence(_pMapUpper, size, ", ", ", ", "", ".ToString(format, CultureInfo.CurrentCulture)")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </summary>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </returns>
        public string ToString(IFormatProvider formatProvider)
        {
            return string.Format(formatProvider, "<#=strFormat#>", <#=GetParamSentence(_pMapUpper, size, ", ", ", ")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </returns>
        public override string ToString()
        {
            return string.Format(CultureInfo.CurrentCulture, "<#=strFormat#>", <#=GetParamSentence(_pMapUpper, size, ", ", ", ")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=SeeRef(fullName)#>.
        /// </returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (format == null)
                return ToString(formatProvider);

            return string.Format(formatProvider, "<#=strFormat#>", <#=GetParamSentence(_pMapUpper, size, ", ", ", ", "", ".ToString(format, formatProvider)")#>);
        }
#endregion

#region Add operators
		public static <#=fullName#> operator +(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> + right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fullName#> operator +(<#=fullName#> left, <#=_types[i]#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> + right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		/// <summary>
        /// Assert a <#=SeeRef(fullName)#> (return it unchanged).
        /// </summary>
        /// <param name="value">The <#=SeeRef(fullName)#> to assert (unchanged).</param>
        /// <returns>The asserted (unchanged) <#=SeeRef(fullName)#>.</returns>
        public static <#=fullName#> operator +(<#=fullName#> value)
        {
            return value;
        }
#endregion

#region Subtract operators
		public static <#=fullName#> operator -(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> - right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fullName#> operator -(<#=fullName#> left, <#=_types[i]#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> - right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		/// <summary>
        /// Negate/reverse the direction of a <#=SeeRef(fullName)#>.
        /// </summary>
        /// <param name="value">The <#=SeeRef(fullName)#> to reverse.</param>
        /// <returns>The reversed <#=SeeRef(fullName)#>.</returns>
        public static <#=fullName#> operator -(<#=fullName#> value)
        {
            return new <#=fullName#>(<#=GetParamSentence(_pMapUpper, size, ", ", ", ", "-value.")#>);
        }
#endregion

#region division operators
		public static <#=fullName#> operator /(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> / right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fullName#> operator /(<#=fullName#> left, <#=_types[i]#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> / right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}
#endregion

#region Multiply operators
		public static <#=fullName#> operator *(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> * right.<#=_pMapUpper[p]#><#=(p < (size-1) ? ", " : "")#><#}#>);
		}

		public static <#=fullName#> operator *(<#=fullName#> left, <#=_types[i]#> right)
		{
			return new <#=fullName#>(<#for(int p = 0; p < size; p++){#>left.<#=_pMapUpper[p]#> * right<#=(p < (size-1) ? ", " : "")#><#}#>);
		}
#endregion

#region Properties

#endregion

#region Static Methods
		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=SeeRef(fullName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static <#=fullName#> Clamp(<#=fullName#> value, <#=_types[i]#> min, <#=_types[i]#> max)
        {
			return new <#=fullName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = value.<#=_pMapUpper[p]#> < min ? min : value.<#=_pMapUpper[p]#> > max ? max : value.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=SeeRef(fullName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static <#=fullName#> Clamp(<#=fullName#> value, <#=fullName#> min, <#=fullName#> max)
        {
			return new <#=fullName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_pMapUpper[p]#> = value.<#=_pMapUpper[p]#> < min.<#=_pMapUpper[p]#> ? min.<#=_pMapUpper[p]#> : value.<#=_pMapUpper[p]#> > max.<#=_pMapUpper[p]#> ? max.<#=_pMapUpper[p]#> : value.<#=_pMapUpper[p]#>,
<#
		}
#>
			};
        }
#endregion

#region Indexers
		/// <summary>
        /// Gets or sets the component at the specified index.
        /// </summary>
        /// <value>The value of the <#=GetParamSentence(_pMapUpper, size, ",", " or ")#> component, depending on the index.</value>
        /// <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component and so on.</param>
        /// <returns>The value of the component at the specified index.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, <#=(size-1)#>].</exception>
        
		public <#=_types[i]#> this[int index]
		{
			get
			{
				switch(index)
				{
<#
					for(int p = 0; p < size; p++)
					{
#>
					case <#=p#>: return <#=_pMapUpper[p]#>;
<#
					}
#>
				}
				throw new ArgumentOutOfRangeException("index", "Indices for <#=fullName#> run from 0 to <#=(size-1)#>, inclusive.");
			}

			set
			{
				switch(index)
				{
<#
					for(int p = 0; p < size; p++)
					{
#>
					case <#=p#>: <#=_pMapUpper[p]#> = value; break;
<#
					}
#>
				}
				throw new ArgumentOutOfRangeException("index", "Indices for <#=fullName#> run from 0 to <#=(size-1)#>, inclusive.");
			}
		}
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
