<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_helpers.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
string[] _types = new string[]{"sbyte", "byte", "int", "uint", "short", "ushort", "long", "ulong", "float", "double", "decimal"};
string[] _names = new string[]{"SByte", "Byte", "Vector", "Vector", "Half", "Half", "Vector", "Vector", "Vector", "Vector"};
string[] _postfixes = new string[]{"", "", "I", "UI", "", "U", "L", "UL", "F", "D", "DC"};
string _propertyMap = "xyzw";
string _propertyMapUpper = "XYZW";

int[] _sizes = new int[]{2, 3, 4};

for(int i = 0; i < _types.Length; i++)
{
	string tName = _types[i];

	foreach(int size in _sizes)
	{
		string fullName = $"{_names[i]}{size}{_postfixes[i]}";
		string fn = $"{fullName}";
#>
namespace Molten.Math
{
	///<summary>A <see cref = "<#=_types[i]#>"/> vector comprised of <#=size#> components.</summary>
	public partial struct <#=fullName#>
	{
<#
		for(int p = 0; p < size; p++)
		{
#>
		///<summary>The <#=_propertyMapUpper[p]#> component.</summary>
		public <#=_types[i]#> <#=_propertyMapUpper[p]#>;

<#
		}
#>
		///<summary>Creates a new instance of <see cref = "<#=fullName#>"/></summary>
		public <#=fullName#>(<#=GetConstructorArgs(tName, _propertyMap, size)#>)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_propertyMapUpper[p]#> = <#=_propertyMap[p]#>;
<#
		}
#>
		}

#region operators
		public static <#=fullName#> operator +(<#=fullName#> left, <#=fullName#> right)
		{
			return new <#=fullName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=_propertyMapUpper[p]#> = left.<#=_propertyMapUpper[p]#> + right.<#=_propertyMapUpper[p]#>,
<#
		}
#>
			};
		}
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
