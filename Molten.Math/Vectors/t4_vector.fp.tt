<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="../t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
List<TypeData> _def = ReadJsonDef<TypeData>(outputPath, "vector_defs.json");
string pMap = "xyzw";
string pMapUpper = "XYZW";

foreach(TypeData d in _def)
{
	if(!d.IsFPType)
	{
		continue;
	}

	foreach(int size in _vectorSizes)
	{
		string fullName = $"{d.Name}{size}{d.Postfix}";
		string fn = $"{fullName}.fp";
		string fpCast = d.DT == "float" ? "(float)" : "";
		string mathHelper = d.FP == "double" ? "MathHelperDP" : "MathHelper";
		string intCast = d.DT == "float" ? "(int)" : (d.DT == "double" ? "(long)" : "$(${d.DT}");
		string intCastPostfix = d.DT == "float" ? "I" : "L";
#>
using System.Runtime.InteropServices;
using System;

namespace Molten
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=size#> components.</summary>
	public partial struct <#=fullName#>
	{
    	/// <summary>
        /// Gets a value indicting whether this instance is normalized.
        /// </summary>
        public bool IsNormalized
        {
            get => <#=mathHelper#>.IsOne(<#for(int p = 0; p < size; p++){#>(<#=pMapUpper[p]#> * <#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

        /// <summary>
        /// Orthonormalizes a list of vectors.
        /// </summary>
        /// <param name="destination">The list of orthonormalized vectors.</param>
        /// <param name="source">The list of vectors to orthonormalize.</param>
        /// <remarks>
        /// <para>Orthonormalization is the process of making all vectors orthogonal to each
        /// other and making all vectors of unit length. This means that any given vector will
        /// be orthogonal to any other given vector in the list.</para>
        /// <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
        /// tend to be numerically unstable. The numeric stability decreases according to the vectors
        /// position in the list so that the first vector is the most stable and the last vector is the
        /// least stable.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        public static void Orthonormalize(<#=fullName#>[] destination, params <#=fullName#>[] source)
        {
            //Uses the modified Gram-Schmidt process.
            //Because we are making unit vectors, we can optimize the math for orthogonalization
            //and simplify the projection operation to remove the division.
            //q1 = m1 / |m1|
            //q2 = (m2 - (q1 ⋅ m2) * q1) / |m2 - (q1 ⋅ m2) * q1|
            //q3 = (m3 - (q1 ⋅ m3) * q1 - (q2 ⋅ m3) * q2) / |m3 - (q1 ⋅ m3) * q1 - (q2 ⋅ m3) * q2|
            //q4 = (m4 - (q1 ⋅ m4) * q1 - (q2 ⋅ m4) * q2 - (q3 ⋅ m4) * q3) / |m4 - (q1 ⋅ m4) * q1 - (q2 ⋅ m4) * q2 - (q3 ⋅ m4) * q3|
            //q5 = ...

            if (source == null)
                throw new ArgumentNullException("source");
            if (destination == null)
                throw new ArgumentNullException("destination");
            if (destination.Length < source.Length)
                throw new ArgumentOutOfRangeException("destination", "The destination array must be of same length or larger length than the source array.");

            for (int i = 0; i < source.Length; ++i)
            {
                <#=fullName#> newvector = source[i];

                for (int r = 0; r < i; ++r)
                    newvector -= Dot(destination[r], newvector) * destination[r];

                newvector.Normalize();
                destination[i] = newvector;
            }
        }

        /// <summary>
        /// Converts the <#=See(fullName)#> into a unit vector.
        /// </summary>
        /// <param name="value">The <#=See(fullName)#> to normalize.</param>
        /// <returns>The normalized <#=See(fullName)#>.</returns>
        public static <#=fullName#> Normalize(<#=fullName#> value, bool allowZero = false)
        {
            value.Normalize(allowZero);
            return value;
        }

        /// <summary>
        /// Returns a normalized unit vector of the original vector.
        /// </summary>
        public <#=fullName#> GetNormalized(bool allowZero = false)
        {
            <#=d.FP#> length = Length();
            if (!<#=mathHelper#>.IsZero(length))
            {
                <#=d.FP#> inverse = 1.0<#=d.FPL#> / length;
                return new <#=fullName#>()
                {
<#
		    for(int p = 0; p < size; p++)
		    {
#>
			        <#=pMapUpper[p]#> = this.<#=pMapUpper[p]#> * inverse,
<#
		    }
#>
                };
            }
            else
            {
                return new <#=fullName#>()
                {
<#
		for(int p = 0; p < size; p++)
		{
#>
                    <#=pMapUpper[p]#> = <#=(p == 1 ? "allowZero ? 1 : 0" : "0")#>,
<#
		}
#>
                };
            }
        }

        /// <summary>
        /// Converts the vector into a unit vector.
        /// </summary>
        public void Normalize(bool allowZero = false)
        {
            <#=d.DT#> length = Length();
            if (!<#=mathHelper#>.IsZero(length))
            {
                <#=d.FP#> inverse = 1.0<#=d.FPL#> / length;
<#
		for(int p = 0; p < size; p++)
		{
#>
			    <#=pMapUpper[p]#> = <#=fpCast#>(<#=pMapUpper[p]#> * inverse);
<#
		}
#>
            }
            else
            {
<#
		for(int p = 0; p < size; p++)
		{
#>
                <#=pMapUpper[p]#> = <#=(p == 1 ? "allowZero ? 1 : 0" : "0")#>;
<#
		}
#>
            }
        }

		/// <summary>
        /// Saturates this instance in the range [0,1]
        /// </summary>
        public void Saturate()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=pMapUpper[p]#> < <#=d.Zero#> ? <#=d.Zero#> : <#=pMapUpper[p]#> > <#=d.One#> ? <#=d.One#> : <#=pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Rounds all components down to the nearest unit.</summary>
        public void Floor()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=(d.DT == "float" ? "(float)" : "")#>Math.Floor(<#=pMapUpper[p]#>);
<#
		}
#>
        }

        /// <summary>Rounds all components up to the nearest unit.</summary>
        public void Ceiling()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=(d.DT == "float" ? "(float)" : "")#>Math.Ceiling(<#=pMapUpper[p]#>);
<#
		}
#>
        }

		/// <summary>Truncate each near-zero component of the current vector towards zero.</summary>
        public void Truncate()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = (Math.Abs(<#=pMapUpper[p]#>) - 0.0001<#=d.FPL#> < 0) ? 0 : <#=pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Updates the component values to the power of the specified value.</summary>
        /// <param name="power"></param>
        public void Pow(<#=d.DT#> power)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=fpCast#>Math.Pow(<#=pMapUpper[p]#>, power);
<#
		}
#>
        }

#region Static Methods
		/// <summary>Truncate each near-zero component of a vector towards zero.</summary>
        /// <param name="value">The <#=fullName#> to be truncated.</param>
        /// <returns></returns>
        public static <#=fullName#> Truncate(<#=fullName#> value)
        {
            return new <#=fullName#>()
            {
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = (Math.Abs(value.<#=pMapUpper[p]#>) - 0.0001<#=d.FPL#> < 0) ? 0 : value.X,
<#
		}
#>
            };
        }
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
