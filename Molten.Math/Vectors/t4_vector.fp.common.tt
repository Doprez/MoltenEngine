<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
bool[] _gen = new bool[]{false, false, false, false, false, false, false, false, true, true, true, false, false};
string _pMap = "xyzw";
string _pMapUpper = "XYZW";

for(int i = 0; i < _types.Length; i++)
{
	if(!_gen[i])
	{
		continue;
	}

	string tName = _types[i];

	foreach(int size in _vectorSizes)
	{
		string fullName = $"{_names[i]}{size}{_postfixes[i]}";
		string fn = $"{fullName}.common";
#>
using System.Runtime.InteropServices;

namespace Molten.Math
{
	///<summary>A <see cref = "<#=_types[i]#>"/> vector comprised of <#=size#> components.</summary>
	public partial struct <#=fullName#>
	{
		/// <summary>
        /// Saturates this instance in the range [0,1]
        /// </summary>
        public void Saturate()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=_pMapUpper[p]#> = <#=_pMapUpper[p]#> < <#=_zero[i]#> ? <#=_zero[i]#> : <#=_pMapUpper[p]#> > <#=_one[i]#> ? <#=_one[i]#> : <#=_pMapUpper[p]#>;
<#
		}
#>
        }
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
