<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<#+
string[] _types = new string[]{"sbyte", "byte", "int", "uint", "short", "ushort", "long", "ulong", "float", "double", "decimal", "nint", "nuint"};
string[] _names = new string[]{"SByte", "Byte", "Vector", "Vector", "Half", "Half", "Vector", "Vector", "Vector", "Vector", "Vector", "Vector", "Vector"};
string[] _postfixes = new string[]{"", "", "I", "UI", "", "U", "L", "UL", "F", "D", "M", "N", "NU"};
int[] _pack = new int[]{1, 1, 4, 4 , 2, 2, 8, 8, 4, 8, 16, 0, 0};
string[] _one = new string[]{"1", "1", "1", "1U", "(short)1", "(ushort)1", "1L", "1UL", "1F", "1D", "1M", "1", "1U"};
string[] _zero = new string[]{"0", "0", "0", "0U", "0", "0", "0L", "0UL", "0F", "0D", "0M", "0", "0U"};
string[] _strSize = new string[]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight"};
int[] _vectorSizes = new int[]{2, 3, 4};

public void SaveFile(string folder, string fileName, string content)
{
	using (FileStream fs = new FileStream(Path.Combine(folder, fileName.Trim() + ".cs"), FileMode.Create))
    {
        using (StreamWriter str = new StreamWriter(fs))
        {
            str.WriteLine(content);
            str.Flush();
        }
    }
}

public string GetConstructorArgs(string type, string map, int count, string prefix = "", string postfix = "")
{
    if(map.Length < count)
        throw new Exception("Map length is shorter than count");
        
    string r = "";
    for(int i = 0; i < count; i++)
    {
        if(i > 0) r += ", ";
        r += $"{type} {prefix}{map[i]}{postfix}";
    }

    return r;
}

public string GetParamSentence(string pMap, int size, string delimiter = ", ", string finalDelimiter = "", string pPrefix = "", string pPostfix = "")
{
    string r = "";
    for(int i = 0; i < size; i++)
    {
        r += $"{pPrefix}{pMap[i]}{pPostfix}";
        r += i < (size - 1) ? (i < (size - 2) ? ", " : finalDelimiter) : ""; 
    }

    return r;
}

public string SeeRef(string typeName)
{
    return $"<see cref=\"{typeName}\"/>";
}
#>
