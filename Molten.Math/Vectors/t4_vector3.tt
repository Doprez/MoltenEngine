<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="../t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
List<TypeData> _def = ReadJsonDef<TypeData>(outputPath, "vector_defs.json");
string pMap = "xyzw";
string pMapUpper = "XYZW";

foreach(TypeData d in _def)
{
	int size = 3;
	string fName = $"{d.Name}{size}{d.Postfix}";
	string fn = $"{fName}.v3";
	string fpCast = d.DT == "float" ? "(float)" : "";
#>
using System.Runtime.InteropServices;

namespace Molten
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=size#> components.</summary>
	public partial struct <#=fName#>
	{
           /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating up (0, 1, 0).
        /// </summary>
        public static readonly <#=fName#> Up = new <#=fName#>(<#=d.Zero#>, <#=d.One#>, <#=d.Zero#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating down (0, -1, 0).
        /// </summary>
        public static readonly <#=fName#> Down = new <#=fName#>(<#=d.Zero#>, -<#=d.One#>, <#=d.Zero#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating left (-1, 0, 0).
        /// </summary>
        public static readonly <#=fName#> Left = new <#=fName#>(-<#=d.One#>, <#=d.Zero#>, <#=d.Zero#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating right (1, 0, 0).
        /// </summary>
        public static readonly <#=fName#> Right = new <#=fName#>(<#=d.One#>, <#=d.Zero#>, <#=d.Zero#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating forward in a right-handed coordinate system (0, 0, -1).
        /// </summary>
        public static readonly <#=fName#> ForwardRH = new <#=fName#>(<#=d.Zero#>, <#=d.Zero#>, -<#=d.One#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating forward in a left-handed coordinate system (0, 0, 1).
        /// </summary>
        public static readonly <#=fName#> ForwardLH = new <#=fName#>(<#=d.Zero#>, <#=d.Zero#>, <#=d.One#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating backward in a right-handed coordinate system (0, 0, 1).
        /// </summary>
        public static readonly <#=fName#> BackwardRH = new <#=fName#>(<#=d.Zero#>, <#=d.Zero#>, <#=d.One#>);

        /// <summary>
        /// A unit <see cref="<#=fName#>"/> designating backward in a left-handed coordinate system (0, 0, -1).
        /// </summary>
        public static readonly <#=fName#> BackwardLH = new <#=fName#>(<#=d.Zero#>, <#=d.Zero#>, -<#=d.One#>);

#region Static Methods
        /// <summary>
        /// Calculates the cross product of two <#=See(fName)#>.
        /// </summary>
        /// <param name="left">First source <#=See(fName)#>.</param>
        /// <param name="right">Second source <#=See(fName)#>.</param>
        /// <param name="result">When the method completes, contains he cross product of the two <#=See(fName)#>.</param>
        public static <#=fName#> Cross(ref <#=fName#> left, ref <#=fName#> right)
        {
            return new Vector3F(
                (left.Y * right.Z) - (left.Z * right.Y),
                (left.Z * right.X) - (left.X * right.Z),
                (left.X * right.Y) - (left.Y * right.X));
        }

        /// <summary>
        /// Calculates the cross product of two <#=See(fName)#>.
        /// </summary>
        /// <param name="left">First source <#=See(fName)#>.</param>
        /// <param name="right">Second source <#=See(fName)#>.</param>
        /// <returns>The cross product of the two <#=See(fName)#>.</returns>
        public static <#=fName#> Cross(<#=fName#> left, <#=fName#> right)
        {
            return Cross(ref left, ref right);
        }
#endregion
	}
}
<#
	SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>
