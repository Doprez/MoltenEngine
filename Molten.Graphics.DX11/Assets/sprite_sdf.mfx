<material>
    <name value="sprite-msdf" />
    <author value="James Yarwood"/>
	<description>The default material for signed-distance field textures/sprites in a SpriteBatch</description>
	<pass>
        <name value="main"/>
        <iterations value="1"/>
        <vertex value="VS"/>
        <geometry value="GS"/>
        <fragment value="PS_MSDF" />
        <blend preset="PreMultipliedAlpha" />
        <rasterizer preset="ScissorTest" />
        <rasterizer preset="DefaultMultisample">
            <condition value="Multisampling"/>
        </rasterizer>
        <rasterizer preset="ScissorTestMultiSample">
            <condition value="Multisampling"/>
            <condition value="ScissorTest"/>
        </rasterizer>
	</pass>
</material>

#include "sprite_common_v2.mfx";

float pxRange = 2;

float median(float r, float g, float b) {
	return max(min(r, g), min(max(r, g), b));
}

float screenPxRange(float2 uv, float2 texSize) {
    float2 unitRange = float2(pxRange,pxRange) / texSize;
    float2 screenTexSize = float2(1.0, 1.0) / fwidth(uv);
    return max(0.5*dot(unitRange, screenTexSize), 1.0);
}

float4 PS_MSDF( PS_IN input) : SV_Target
{            
    SpriteData sd = spriteData[input.id];
    
    float3 msd = mapDiffuse.Sample(diffuseSampler, input.uv).rgb;
    float s = median(msd.r, msd.g, msd.b);
    float screenPxDistance = screenPxRange(input.uvLocal, sd.size)*(s - 0.5);
    float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);
    
    return sd.col * opacity;
}